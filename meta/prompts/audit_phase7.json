{
  "id": "labs-spec-v2.0.0-phase7-audit-r1",
  "type": "codex_audit_prompt",
  "description": "Audit Synesthetic Labs Phase 7 (Component Generation) implementation - schema-driven builders, LLM integration, populated assets.",
  "input": {
    "spec_version": "v2.0.0",
    "spec_ref": "docs/phase7_component_generation.md",
    "target_output": {
      "files": ["meta/output/labs_phase7_state.md"],
      "format": "markdown",
      "must_write": true
    },
    "rules_source": "docs/phase7_component_generation.md",
    "ruleset": "schema-driven generation, component builders, LLM integration, populated assets, TDD"
  },
  "checks": [
    {
      "id": "schema-analyzer-v2.0.0",
      "expect": "SchemaAnalyzer extracts component requirements from MCP schema - identifies required/optional fields, types, constraints, enum values",
      "files": ["labs/v0_7_3/schema_analyzer.py", "tests/v0_7_3/test_schema_analyzer.py"],
      "patterns": ["class SchemaAnalyzer", "get_required_components", "get_component_schema", "get_field_constraints", "def test_schema_analyzer"]
    },
    {
      "id": "component-builders-exist-v2.0.0",
      "expect": "Component builders in labs/v0_7_3/components/ - shader.py, tone.py, haptic.py, control.py, modulation.py with build() methods",
      "files": ["labs/v0_7_3/components/", "labs/v0_7_3/components/__init__.py"],
      "patterns": ["shader.py", "tone.py", "haptic.py", "control.py", "modulation.py", "def build", "class ShaderBuilder", "class ToneBuilder"]
    },
    {
      "id": "shader-builder-v2.0.0",
      "expect": "ShaderBuilder generates valid GLSL - produces fragment shaders with required uniforms (u_time, u_resolution), validates syntax, handles prompt semantics",
      "files": ["labs/v0_7_3/components/shader.py", "tests/v0_7_3/test_shader_builder.py"],
      "patterns": ["class ShaderBuilder", "def build", "u_time", "u_resolution", "void main", "#version", "gl_FragColor", "test_shader_generation"]
    },
    {
      "id": "tone-builder-v2.0.0",
      "expect": "ToneBuilder generates valid tone parameters - frequency/note, waveform, envelope (ADSR), effects (reverb/delay), validates ranges",
      "files": ["labs/v0_7_3/components/tone.py", "tests/v0_7_3/test_tone_builder.py"],
      "patterns": ["class ToneBuilder", "def build", "frequency", "waveform", "envelope", "attack", "decay", "sustain", "release", "test_tone_generation"]
    },
    {
      "id": "haptic-builder-v2.0.0",
      "expect": "HapticBuilder generates valid haptic patterns - intensity curves, duration, rhythm, validates amplitude ranges (0.0-1.0)",
      "files": ["labs/v0_7_3/components/haptic.py", "tests/v0_7_3/test_haptic_builder.py"],
      "patterns": ["class HapticBuilder", "def build", "intensity", "duration", "pattern", "amplitude", "test_haptic_generation"]
    },
    {
      "id": "llm-integration-v2.0.0",
      "expect": "Azure OpenAI integration with two-stage generation - decompose prompt → generate components, uses gpt-4 deployment, handles API errors",
      "files": ["labs/v0_7_3/generator.py", "tests/v0_7_3/test_generator.py"],
      "patterns": ["_decompose_prompt", "_generate_with_llm", "AzureOpenAI", "AZURE_OPENAI_ENDPOINT", "def test_llm_generation", "not", "# TODO"]
    },
    {
      "id": "prompt-semantic-extraction-v2.0.0",
      "expect": "Prompt parser extracts semantic hints - colors, emotions, tempo, intensity, rhythm - maps to component parameters",
      "files": ["labs/v0_7_3/prompt_parser.py", "tests/v0_7_3/test_prompt_parser.py"],
      "patterns": ["class PromptParser", "extract_semantics", "color_hints", "emotion_hints", "tempo_hints", "intensity_hints", "def test_prompt_parsing"]
    },
    {
      "id": "populated-assets-v2.0.0",
      "expect": "Generated assets have actual content - shader.code populated, tone.frequency set, haptic.pattern defined, NOT just name + meta_info",
      "files": ["tests/v0_7_3/test_integration.py"],
      "patterns": ["assert asset['shader']", "assert asset['tone']", "assert 'void main' in asset['shader']['code']", "assert asset['tone']['frequency']", "not", "assert len(asset) == 2"]
    },
    {
      "id": "schema-validation-passing-v2.0.0",
      "expect": "Generated assets pass MCP validation - confirm() returns ok=True, strict=True validation enabled, no schema violations",
      "files": ["tests/v0_7_3/test_integration.py"],
      "patterns": ["client.confirm", "strict=True", "assert result['ok']", "assert result['errors'] == []", "test_populated_asset_validation"]
    },
    {
      "id": "component-builder-tests-v2.0.0",
      "expect": "TDD approach - component builder tests written FIRST, test minimal cases, test with LLM, test schema compliance",
      "files": ["tests/v0_7_3/test_shader_builder.py", "tests/v0_7_3/test_tone_builder.py", "tests/v0_7_3/test_haptic_builder.py"],
      "patterns": ["def test_", "pytest", "assert", "ShaderBuilder", "ToneBuilder", "HapticBuilder", "test_minimal", "test_with_llm"]
    },
    {
      "id": "cli-populated-output-v2.0.0",
      "expect": "CLI generates populated assets - make generate produces assets with component content, --llm flag triggers LLM generation",
      "files": ["labs/v0_7_3/cli.py", "Makefile"],
      "patterns": ["--llm", "generate_asset", "components", "generate-llm", "PROMPT", "OUTPUT"]
    },
    {
      "id": "error-handling-v2.0.0",
      "expect": "Robust error handling - LLM timeout/failure fallback to minimal generation, invalid GLSL caught, out-of-range values validated",
      "files": ["labs/v0_7_3/generator.py", "labs/v0_7_3/components/shader.py"],
      "patterns": ["try:", "except", "AzureOpenAIError", "ValidationError", "fallback_to_minimal", "logger.warning"]
    },
    {
      "id": "telemetry-separation-maintained-v2.0.0",
      "expect": "Telemetry separation preserved - generated assets contain ONLY schema fields, telemetry wraps after validation",
      "files": ["labs/v0_7_3/generator.py", "labs/v0_7_3/telemetry.py"],
      "patterns": ["validate", "wrap_with_telemetry", "not", "trace_id", "not", "deployment_id", "# Validation contract clean"]
    }
  ],
  "report": {
    "sections": [
      "Summary: Phase 7 component generation state",
      "Schema Analysis: SchemaAnalyzer completeness",
      "Component Builders: Coverage and quality (shader, tone, haptic, control, modulation)",
      "LLM Integration: Two-stage generation, error handling, fallback",
      "Asset Quality: Population completeness, validation pass rate",
      "Test Coverage: TDD adherence, component builder tests",
      "Next Steps: Enhancements and optimizations"
    ],
    "status_values": ["✅ Complete", "❌ Missing", "⚠️ Partial", "⏳ In Progress"]
  },
  "exit_criteria": [
    "meta/output/labs_phase7_state.md written with Phase 7 assessment",
    "SchemaAnalyzer extracts all component requirements correctly",
    "At least 3 component builders implemented (shader, tone, haptic)",
    "Generated assets pass MCP validation with populated content",
    "LLM integration working with two-stage generation",
    "Component builder tests passing with TDD approach",
    "CLI produces populated assets with --llm flag"
  ]
}
