{
  "version": "v0.3.6b",
  "spec_ref": "docs/specs/synesthetic_labs_v0.3.6b.md#synesthetic-labs--spec-v0.3.6b",
  "task": "Close environment, normalization, and observability gaps identified in v0.3.6a",
  "objective": "Ensure all Azure and Gemini environment variables are surfaced at startup, restore 0.7.3 normalization compliance with deterministic section fillers, and enrich external run logs with deployment metadata.",
  "changes": [
    {
      "id": "env-preload-v0.3.6b",
      "description": "Broaden environment surfacing to include AZURE_OPENAI_API_VERSION, LABS_EXTERNAL_ENGINE, and LABS_EXTERNAL_LIVE; warn on missing vars for any active engine.",
      "edits": [
        {
          "file": "labs/cli.py",
          "pattern": "def _load_env_file",
          "multiple": false,
          "replacement": "def _load_env_file(path: str = '.env') -> None:\n    import os; from dotenv import load_dotenv\n    if os.path.exists(path):\n        load_dotenv(path)\n\n    os.environ.setdefault('LABS_SCHEMA_VERSION', '0.7.3')\n    os.environ.setdefault('LABS_FAIL_FAST', os.getenv('LABS_FAIL_FAST', '1'))\n    os.environ.setdefault('LABS_EXTERNAL_ENGINE', os.getenv('LABS_EXTERNAL_ENGINE', 'azure'))\n    os.environ.setdefault('LABS_EXTERNAL_LIVE', os.getenv('LABS_EXTERNAL_LIVE', '0'))\n\n    engine = os.getenv('LABS_EXTERNAL_ENGINE', 'azure').lower()\n    missing_keys = []\n    if engine == 'azure':\n        keys = ['AZURE_OPENAI_ENDPOINT','AZURE_OPENAI_API_KEY','AZURE_OPENAI_DEPLOYMENT','AZURE_OPENAI_API_VERSION']\n    elif engine == 'gemini':\n        keys = ['GEMINI_API_KEY','GEMINI_MODEL','GEMINI_ENDPOINT']\n    else:\n        keys = []\n    for k in keys:\n        if not os.getenv(k):\n            missing_keys.append(k)\n    if missing_keys:\n        print(f'[WARN] Missing environment variables: {', '.join(missing_keys)}')"
        }
      ]
    },
    {
      "id": "fill-empty-sections-v0.3.6b",
      "description": "Add helper to deterministically fill empty sections for legacy (0.7.3) assets.",
      "edits": [
        {
          "file": "labs/generator/assembler.py",
          "pattern": "class AssetAssembler",
          "multiple": false,
          "replacement": "class AssetAssembler:\n    @staticmethod\n    def _fill_empty_sections(asset: dict) -> dict:\n        for section in ['shader','tone','haptic','control','modulation','rule_bundle']:\n            asset.setdefault(section, {})\n        return asset"
        }
      ]
    },
    {
      "id": "normalization-073-v0.3.6b",
      "description": "Strip provenance completely for 0.7.3 assets and apply _fill_empty_sections before validation.",
      "edits": [
        {
          "file": "labs/generator/assembler.py",
          "pattern": "def normalize",
          "multiple": true,
          "replacement": "def normalize(asset: dict, schema_version: str = '0.7.3') -> dict:\n    if schema_version == '0.7.3':\n        asset = AssetAssembler._fill_empty_sections(asset)\n        if 'meta_info' in asset and 'provenance' in asset['meta_info']:\n            asset['meta_info'].pop('provenance', None)\n    return asset"
        }
      ]
    },
    {
      "id": "structured-logging-v0.3.6b",
      "description": "Enrich external run logs with deployment metadata for full observability.",
      "edits": [
        {
          "file": "labs/generator/external.py",
          "pattern": "def record_run",
          "multiple": false,
          "replacement": "def record_run(self, run_log: dict) -> None:\n    import os, json, datetime\n    run_log['deployment'] = os.getenv('AZURE_OPENAI_DEPLOYMENT', 'unknown')\n    run_log['timestamp'] = datetime.datetime.utcnow().isoformat() + 'Z'\n    path = os.path.join('meta','output','external_runs.jsonl')\n    with open(path, 'a', encoding='utf-8') as f:\n        f.write(json.dumps(run_log) + '\\n')"
        }
      ]
    }
  ],
  "exit_criteria": [
    "CLI surfaces warnings for all required Azure and Gemini environment variables, including AZURE_OPENAI_API_VERSION and LABS_EXTERNAL_LIVE.",
    "_fill_empty_sections() creates deterministic empty fields for shader, tone, haptic, control, modulation, and rule_bundle.",
    "0.7.3 assets exclude meta_info.provenance entirely during normalization.",
    "record_run() includes deployment and timestamp fields in each log entry.",
    "All tests for environment preload, normalization, and structured logging pass under both Azure and relaxed modes."
  ]
}
