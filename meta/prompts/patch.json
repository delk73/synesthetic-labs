{
  "task": "Close v0.3.4 drift (normalization, bounds, deterministic alias)",
  "objective": "Bring Labs implementation into full alignment with v0.3.4 spec by rejecting unknown keys, enforcing numeric bounds pre-MCP, and adding the --engine=deterministic alias.",
  "changes": [
    {
      "id": "normalization_reject_unknowns",
      "description": "Reject unknown sections/keys or wrong types during normalization instead of silently dropping them.",
      "edits": [
        {
          "file": "labs/generator/external.py",
          "pattern": ".*",
          "multiple": true,
          "replacement": "# In normalization step:\n# - walk asset dict\n# - if any unexpected keys or wrong-typed values are found, raise structured error\n# - failure.reason = 'bad_response', failure.detail = 'unknown_key:<name>' or 'wrong_type:<path>'\n# - extend tests to assert rejection\n"
        }
      ]
    },
    {
      "id": "preflight_bounds",
      "description": "Add pre-flight numeric bounds validation before MCP call (e.g., haptic intensity âˆˆ [0,1], parameter min/max).",
      "edits": [
        {
          "file": "labs/generator/external.py",
          "pattern": ".*",
          "multiple": true,
          "replacement": "# Implement _validate_bounds(asset):\n# - check haptic.intensity between 0.0 and 1.0\n# - check shader/tone parameter defaults within declared min/max\n# - raise structured error if out-of-range with failure.reason='bad_response' and detail\n# Call _validate_bounds(asset) before MCP invocation\n"
        }
      ]
    },
    {
      "id": "cli_deterministic_alias",
      "description": "Support --engine=deterministic CLI alias.",
      "edits": [
        {
          "file": "labs/cli.py",
          "pattern": ".*",
          "multiple": true,
          "replacement": "# In CLI parser:\nparser.add_argument('--engine', choices=['gemini','openai','deterministic','mock'], default='deterministic')\n# Map 'deterministic' to existing local/mock generator\n# Update help text and README snippets\n"
        }
      ]
    },
    {
      "id": "tests_bounds_and_alias",
      "description": "Add unit tests for unknown key rejection, pre-flight bounds enforcement, and deterministic alias.",
      "edits": [
        {
          "file": "tests/test_external_generator.py",
          "pattern": ".*",
          "multiple": true,
          "replacement": "def test_unknown_key_rejection(): ...\n\ndef test_preflight_bounds_enforced(): ...\n"
        },
        {
          "file": "tests/test_pipeline.py",
          "pattern": ".*",
          "multiple": true,
          "replacement": "def test_cli_engine_deterministic_alias(tmp_path): ...\n"
        }
      ]
    },
    {
      "id": "docs_deterministic_alias",
      "description": "Update README/docs to mention deterministic alias for CLI.",
      "edits": [
        {
          "file": "README.md",
          "pattern": ".*",
          "multiple": true,
          "replacement": "## Engines\n- gemini: live or mock Gemini\n- openai: live or mock OpenAI\n- deterministic: built-in deterministic generator (baseline)\n- mock: legacy synonym for deterministic\n"
        }
      ]
    }
  ],
  "constraints": {
    "rules": [
      "Do not break existing external generator mock/live flows.",
      "Unknown key/type rejection must raise structured error with reason/detail logged.",
      "Bounds validation must reject before MCP; do not rely on MCP alone.",
      "Deterministic alias must be functionally identical to current local baseline.",
      "Update tests to assert rejection cases and CLI alias works."
    ]
  },
  "exit_criteria": [
    "Normalization rejects unknown keys/types with structured error and logged failure.",
    "Pre-flight bounds validation enforced before MCP; out-of-range assets rejected.",
    "CLI supports --engine=deterministic and docs updated.",
    "Tests cover unknown key rejection, bounds enforcement, and deterministic alias.",
    "CI green in both mock and live external modes."
  ]
}
