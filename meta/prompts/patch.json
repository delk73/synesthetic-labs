{
  "version": "v0.3.6a",
  "spec_ref": "docs/labs_spec.md#synesthetic-labs--spec-v0.3.6a-schema-bound-generation--0-7-3-lock",
  "task": "Fix Gemini message, enforce Azure schema binding, and remove nondeterministic parsing per v0.3.6a audit",
  "objective": "Align implementation with the v0.3.6a (0.7.3-locked) spec by ensuring Gemini uses the exact placeholder text, Azure binds to the 0.7.3 MCP schema in strict mode, and OpenAI responses parse strictly via json.loads with no regex fallbacks.",
  "changes": [
    {
      "id": "gemini-placeholder-message-v0.3.6a",
      "description": "Update GeminiGenerator to raise NotImplementedError('Vertex AI structured-output unsupported') and assert exact message in tests.",
      "edits": [
        {
          "file": "labs/generator/external.py",
          "pattern": "class GeminiGenerator",
          "multiple": false,
          "replacement": "class GeminiGenerator(BaseGenerator):\n    engine = 'gemini'\n\n    def generate(self, *args, **kwargs):\n        raise NotImplementedError('Vertex AI structured-output unsupported')"
        },
        {
          "file": "tests/test_external_generator.py",
          "pattern": "def test_gemini_generate_is_placeholder",
          "multiple": false,
          "replacement": "def test_gemini_generate_is_placeholder():\n    import pytest\n    from labs.generator.external import GeminiGenerator\n    gen = GeminiGenerator()\n    with pytest.raises(NotImplementedError) as e:\n        gen.generate('placeholder')\n    assert 'Vertex AI structured-output unsupported' in str(e.value)"
        }
      ]
    },
    {
      "id": "azure-schema-binding-v0.3.6a",
      "description": "Modify AzureOpenAIGenerator to use response_format={'type':'json_schema','json_schema':{'schema':schema},'strict':True}.",
      "edits": [
        {
          "file": "labs/generator/external.py",
          "pattern": "def generate",
          "multiple": true,
          "replacement": "def generate(self, prompt: str, **kwargs) -> dict:\n    from mcp.core import get_schema\n    import os, json\n\n    schema_resp = get_schema('synesthetic-asset', version=os.getenv('LABS_SCHEMA_VERSION', '0.7.3'))\n    schema = schema_resp['schema']\n\n    response = self.client.chat.completions.create(\n        model=os.getenv('AZURE_OPENAI_DEPLOYMENT', 'gpt-4o-mini'),\n        messages=[\n            {\"role\": \"system\", \"content\": \"You are a schema-bound generator producing SynestheticAsset JSON strictly matching the provided schema.\"},\n            {\"role\": \"user\", \"content\": prompt}\n        ],\n        response_format={\n            \"type\": \"json_schema\",\n            \"json_schema\": {\"schema\": schema},\n            \"strict\": True\n        }\n    )\n\n    return json.loads(response.choices[0].message.content)"
        },
        {
          "file": "tests/test_external_generator.py",
          "pattern": "def test_azure_schema_binding",
          "multiple": false,
          "replacement": "def test_azure_schema_binding(monkeypatch):\n    import json\n    from labs.generator.external import AzureOpenAIGenerator\n    called = {}\n\n    class DummyClient:\n        class chat:\n            class completions:\n                @staticmethod\n                def create(**kwargs):\n                    called.update(kwargs)\n                    return type('R', (), {'choices':[{'message':{'content': json.dumps({'ok':True})}}]})()\n\n    gen = AzureOpenAIGenerator()\n    gen.client = DummyClient()\n    gen.generate('test prompt')\n\n    assert called['response_format']['type'] == 'json_schema'\n    assert called['response_format']['strict'] is True"
        }
      ]
    },
    {
      "id": "response-parse-deterministic-v0.3.6a",
      "description": "Remove regex fallback parsing in _extract_structured_payload; enforce strict json.loads-only decoding.",
      "edits": [
        {
          "file": "labs/generator/external.py",
          "pattern": "def _extract_structured_payload",
          "multiple": false,
          "replacement": "def _extract_structured_payload(self, response: dict) -> dict:\n    import json\n    try:\n        return json.loads(response['choices'][0]['message']['content'])\n    except Exception as e:\n        raise ValueError(f'Failed to parse structured payload strictly: {e}')"
        },
        {
          "file": "tests/test_external_generator.py",
          "pattern": "def test_openai_strict_parse",
          "multiple": false,
          "replacement": "def test_openai_strict_parse():\n    import json, pytest\n    from labs.generator.external import OpenAIGenerator\n    gen = OpenAIGenerator()\n    good_resp = {'choices':[{'message':{'content':json.dumps({'ok':True})}}]}\n    bad_resp = {'choices':[{'message':{'content':'INVALID'}}]}\n    assert gen._extract_structured_payload(good_resp)['ok'] is True\n    with pytest.raises(ValueError):\n        gen._extract_structured_payload(bad_resp)"
        }
      ]
    }
  ],
  "exit_criteria": [
    "GeminiGenerator raises NotImplementedError with exact message 'Vertex AI structured-output unsupported'.",
    "AzureOpenAIGenerator uses response_format.type == 'json_schema' with schema attached and strict=True.",
    "_extract_structured_payload() performs only json.loads parsing with no regex fallback.",
    "pytest -q passes across updated tests."
  ]
}
