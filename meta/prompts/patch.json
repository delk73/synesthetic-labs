{
  "task": "Implement Gemini schema binding (v0.3.5a ยง5.1)",
  "objective": "Inject MCP schema $id into Gemini generation_config.response_schema and mark schema_binding in logs.",
  "changes": [
    {
      "id": "gemini_request_schema_binding",
      "description": "Attach MCP schema $id to Gemini generation requests to enforce structured JSON output.",
      "edits": [
        {
          "file": "labs/generator/external.py",
          "pattern": "def _build_request",
          "multiple": false,
    "replacement": "from mcp.core import get_schema\n\ndef _build_request(self, prompt: str, schema_version: str = '0.7.3'):\n    schema_resp = get_schema('synesthetic-asset')\n    if not schema_resp.get('ok'):\n        self.logger.warning('MCP schema unavailable; proceeding without schema binding')\n        schema_id = None\n    else:\n        schema_id = schema_resp['schema'].get('$id')\n\n    req = {\n        'contents': [{'role': 'user', 'parts': [{'text': prompt}]}],\n        'generation_config': {\n            'response_mime_type': 'application/json'\n        },\n        'model': self.model\n    }\n    if schema_id:\n        req['generation_config']['response_schema'] = {'schema': {'$ref': schema_id}}\n        self.logger.debug(f'Gemini request schema bound to {schema_id}')\n    return req"
        }
      ]
    },
    {
      "id": "gemini_log_schema_binding",
      "description": "Extend external logging to include schema_binding flag and schema_id reference.",
      "edits": [
        {
          "file": "labs/logging.py",
          "pattern": "def log_external_generation",
          "multiple": false,
          "replacement": "def log_external_generation(event, *, schema_binding=False, schema_id=None):\n    data = {\n        'timestamp': datetime.utcnow().isoformat(),\n        'engine': event.get('engine'),\n        'endpoint': event.get('endpoint'),\n        'trace_id': event.get('trace_id'),\n        'schema_binding': schema_binding,\n        'schema_id': schema_id,\n        'taxonomy': event.get('taxonomy'),\n    }\n    with open('meta/output/labs/external.jsonl', 'a') as f:\n        f.write(json.dumps(data) + '\\n')"
        }
      ]
    }
  ]
}
