{
  "version": "v0.3.6a",
  "spec_ref": "docs/specs/synesthetic_labs_v0.3.6a.md#synesthetic-labs--spec-v0.3.6a",
  "task": "Implement Azure OpenAI structured-output integration while maintaining schema 0.7.3 compliance",
  "objective": "Generate schema-valid 0.7.3 assets through Azure OpenAI or deterministic engines, route through MCP validation, and preserve provenance branching for future 0.7.4+ enriched schemas.",
  "changes": [
    {
      "id": "env-preload-v0.3.6a",
      "description": "Expose Azure and Gemini environment variables; warn only for active engine; preserve 0.7.3 as default schema.",
      "edits": [
        {
          "file": "labs/cli.py",
          "pattern": "def _load_env_file",
          "multiple": false,
          "replacement": "def _load_env_file(path: str = '.env') -> None:\n    import os; from dotenv import load_dotenv\n    if os.path.exists(path):\n        load_dotenv(path)\n\n    os.environ.setdefault('LABS_SCHEMA_VERSION', '0.7.3')\n    os.environ.setdefault('LABS_FAIL_FAST', os.getenv('LABS_FAIL_FAST', '1'))\n    os.environ.setdefault('LABS_EXTERNAL_ENGINE', os.getenv('LABS_EXTERNAL_ENGINE', 'azure'))\n\n    engine = os.getenv('LABS_EXTERNAL_ENGINE', 'azure').lower()\n    if engine == 'azure':\n        for k in ['AZURE_OPENAI_ENDPOINT','AZURE_OPENAI_API_KEY','AZURE_OPENAI_DEPLOYMENT']:\n            if not os.getenv(k):\n                print(f'[WARN] Missing Azure env var: {k}')\n    elif engine == 'gemini':\n        for k in ['GEMINI_API_KEY','GEMINI_MODEL','GEMINI_ENDPOINT']:\n            if not os.getenv(k):\n                print(f'[WARN] Missing Gemini env var: {k}')"
        }
      ]
    },
    {
      "id": "azure-generator-v0.3.6a",
      "description": "Introduce AzureOpenAIGenerator using chat.completions structured-output mode with json_object response_format.",
      "edits": [
        {
          "file": "labs/generator/external.py",
          "pattern": "class AzureOpenAIGenerator",
          "multiple": false,
          "replacement": "class AzureOpenAIGenerator(BaseGenerator):\n    engine = 'azure'\n\n    def __init__(self):\n        super().__init__()\n        from openai import AzureOpenAI\n        self.client = AzureOpenAI(\n            api_key=os.getenv('AZURE_OPENAI_API_KEY'),\n            azure_endpoint=os.getenv('AZURE_OPENAI_ENDPOINT'),\n            api_version=os.getenv('AZURE_OPENAI_API_VERSION','2025-01-01-preview')\n        )\n        self.deployment = os.getenv('AZURE_OPENAI_DEPLOYMENT','gpt-4o-mini')\n\n    def generate(self, prompt: str, **kwargs) -> dict:\n        response = self.client.chat.completions.create(\n            model=self.deployment,\n            messages=[{\"role\": \"system\", \"content\": \"You are a schema-bound generator.\"}, {\"role\": \"user\", \"content\": prompt}],\n            response_format={\"type\": \"json_object\"}\n        )\n        return response.to_dict()"
        }
      ]
    },
    {
      "id": "gemini-placeholder-v0.3.6a",
      "description": "Demote GeminiGenerator to placeholder until Vertex AI provides structured-output contract.",
      "edits": [
        {
          "file": "labs/generator/external.py",
          "pattern": "class GeminiGenerator",
          "multiple": false,
          "replacement": "class GeminiGenerator(BaseGenerator):\n    engine = 'gemini'\n\n    def generate(self, *_, **__):\n        raise NotImplementedError('Gemini structured-output is disabled until Vertex AI migration.')"
        }
      ]
    },
    {
      "id": "parse-response-v0.3.6a",
      "description": "Deterministic parser for Azure JSON responses and Gemini fallback, ensuring pure JSON extraction for schema 0.7.3 assets.",
      "edits": [
        {
          "file": "labs/generator/external.py",
          "pattern": "def _parse_response",
          "multiple": false,
          "replacement": "def _parse_response(self, resp: dict, engine: str = 'azure') -> dict:\n    import json, re\n    try:\n        if engine in ('azure','openai'):\n            text = resp['choices'][0]['message']['content']\n        elif engine == 'gemini':\n            text = resp['candidates'][0]['content']['parts'][0]['text']\n        else:\n            raise ValueError(f'Unknown engine: {engine}')\n        try:\n            return json.loads(text)\n        except Exception:\n            match = re.search(r'\\{.*\\}', text, re.DOTALL)\n            return json.loads(match.group(0)) if match else {'error': 'parse_failed'}\n    except Exception as e:\n        self._logger.error(f'Parse error ({engine}): {e}')\n        raise"
        }
      ]
    },
    {
      "id": "provenance-branch-v0.3.6a",
      "description": "Build minimal provenance for 0.7.3; enrich only for ≥0.7.4 schemas per spec §9.",
      "edits": [
        {
          "file": "labs/generator/assembler.py",
          "pattern": "def _build_asset_provenance",
          "multiple": false,
          "replacement": "def _build_asset_provenance(engine: str, schema_version: str = '0.7.3', input_parameters: dict | None = None) -> dict:\n    import uuid, os, datetime\n    trace_id = str(uuid.uuid4())\n    prov = {\n        'engine': engine,\n        'trace_id': trace_id,\n        'timestamp': datetime.datetime.utcnow().isoformat() + 'Z'\n    }\n    if schema_version >= '0.7.4':\n        prov.update({\n            'endpoint': os.getenv('AZURE_OPENAI_ENDPOINT') or os.getenv('GEMINI_ENDPOINT'),\n            'deployment': os.getenv('AZURE_OPENAI_DEPLOYMENT') or os.getenv('GEMINI_MODEL'),\n            'api_version': os.getenv('AZURE_OPENAI_API_VERSION','2025-01-01-preview'),\n            'input_parameters': input_parameters or {}\n        })\n    return prov"
        }
      ]
    },
    {
      "id": "normalise-073-v0.3.6a",
      "description": "Strip enriched fields before MCP validation to guarantee 0.7.3 schema compliance.",
      "edits": [
        {
          "file": "labs/generator/external.py",
          "pattern": "def _normalise_asset",
          "multiple": false,
          "replacement": "def _normalise_asset(self, asset: dict, schema_version: str = '0.7.3') -> dict:\n    # Enforce 0.7.3 compliance by removing enriched provenance keys\n    if schema_version == '0.7.3':\n        if 'meta_info' in asset and 'provenance' in asset['meta_info']:\n            allowed = {'engine','trace_id','timestamp'}\n            asset['meta_info']['provenance'] = {k:v for k,v in asset['meta_info']['provenance'].items() if k in allowed}\n    return asset"
        }
      ]
    },
    {
      "id": "fallback-fillers-v0.3.6a",
      "description": "Deterministic section fillers for shader/tone/haptic/control fields per spec §8.",
      "edits": [
        {
          "file": "labs/generator/assembler.py",
          "pattern": "class AssetAssembler",
          "multiple": false,
          "replacement": "class AssetAssembler:\n    @staticmethod\n    def default_shader(): return {'type':'fragment','code':'// default shader'}\n    @staticmethod\n    def default_tone(): return {'type':'sine','frequency':440}\n    @staticmethod\n    def default_haptic(): return {'pattern':'pulse','duration_ms':120}\n    @staticmethod\n    def default_control(): return {'sensitivity':1.0,'range':[0,1]}\n    @staticmethod\n    def fill_defaults(asset: dict) -> dict:\n        for k, fn in {\n            'shader': AssetAssembler.default_shader,\n            'tone': AssetAssembler.default_tone,\n            'haptic': AssetAssembler.default_haptic,\n            'control': AssetAssembler.default_control\n        }.items():\n            asset.setdefault(k, fn())\n        return asset"
        }
      ]
    },
    {
      "id": "cli-validation-flow-v0.3.6a",
      "description": "Wire CLI generation through invoke_mcp() with strict/relaxed handling per spec §10.",
      "edits": [
        {
          "file": "labs/mcp/validate.py",
          "pattern": "def validate_asset",
          "multiple": true,
          "replacement": "def invoke_mcp(asset: dict, strict: bool = True) -> dict:\n    result = validate_asset(asset)\n    if strict and not result.get('ok'):\n        raise ValidationError('strict validation failed')\n    if not strict and not result.get('ok'):\n        print('[WARN] relaxed validation: asset persisted with warnings')\n    return result"
        },
        {
          "file": "labs/cli.py",
          "pattern": "critic.review",
          "multiple": false,
          "replacement": "from labs.mcp.validate import invoke_mcp\n        review = invoke_mcp(asset, strict=bool(args.strict))"
        }
      ]
    }
  ],
  "exit_criteria": [
    "All assets validate against schema 0.7.3 with no enriched fields.",
    "AzureOpenAIGenerator returns valid structured JSON via chat.completions.",
    "GeminiGenerator cleanly raises NotImplementedError.",
    "Provenance builder branches correctly: minimal for 0.7.3, enriched for ≥0.7.4.",
    "_normalise_asset() strips endpoint/deployment/api_version from 0.7.3 outputs.",
    "CLI generate uses invoke_mcp() for strict and relaxed validation modes.",
    "All required sections (shader, tone, haptic, control) are deterministically filled."
  ]
}
