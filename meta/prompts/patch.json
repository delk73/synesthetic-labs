{
  "version": "v0.3.6a",
  "spec_ref": "docs/labs_spec.md#synesthetic-labs--spec-v0.3.6a-schema-bound-generation--0-7-3-lock",
  "task": "Force inline schema resolution across MCP, CLI, and Azure bindings; verify via regression tests.",
  "objective": "Eliminate preserve-mode drift by defaulting LABS_SCHEMA_RESOLUTION='inline', enforcing inline retrieval in MCPClient and AzureOpenAIGenerator, and verifying inline propagation through logs and tests.",
  "changes": [
    {
      "id": "cli-inline-default-v0.3.6a",
      "description": "Bootstrap LABS_SCHEMA_RESOLUTION to inline if unset.",
      "edits": [
        {
          "file": "labs/cli.py",
          "pattern": "load_dotenv",
          "multiple": false,
          "replacement": "load_dotenv()\n    # v0.3.6a: enforce inline schema resolution\n    import os\n    if not os.getenv('LABS_SCHEMA_RESOLUTION'):\n        os.environ['LABS_SCHEMA_RESOLUTION'] = 'inline'"
        }
      ]
    },
    {
      "id": "mcp-client-inline-default-v0.3.6a",
      "description": "Default resolution to inline in MCP client and confirm in constructor.",
      "edits": [
        {
          "file": "labs/mcp/client.py",
          "pattern": "self.resolution = os.getenv\\('LABS_SCHEMA_RESOLUTION'.*\\)",
          "multiple": false,
          "replacement": "self.resolution = os.getenv('LABS_SCHEMA_RESOLUTION', 'inline')"
        },
        {
          "file": "labs/mcp/client.py",
          "pattern": "if not self.resolution:",
          "multiple": false,
          "replacement": "if not self.resolution or self.resolution not in ('inline','preserve','bundled'):\n            self.resolution = 'inline'"
        }
      ]
    },
    {
      "id": "external-generator-inline-fetch-v0.3.6a",
      "description": "Ensure all external schema pulls use resolution='inline'.",
      "edits": [
        {
          "file": "labs/generator/external.py",
          "pattern": "get_schema\\(",
          "multiple": true,
          "replacement": "get_schema('synesthetic-asset', version=os.getenv('LABS_SCHEMA_VERSION', '0.7.3'), resolution='inline')"
        }
      ]
    },
    {
      "id": "logging-inline-resolution-v0.3.6a",
      "description": "Hardcode 'inline' into schema_resolution in structured logs.",
      "edits": [
        {
          "file": "labs/generator/external.py",
          "pattern": "\"schema_resolution\":",
          "multiple": false,
          "replacement": "\"schema_resolution\": 'inline',"
        }
      ]
    },
    {
      "id": "test-inline-resolution-v0.3.6a",
      "description": "Regression tests validating inline schema enforcement.",
      "edits": [
        {
          "file": "tests/test_external_generator.py",
          "pattern": "def test_azure_schema_binding",
          "multiple": false,
          "replacement": "def test_azure_schema_binding(monkeypatch):\n    import json, os\n    from labs.generator.external import AzureOpenAIGenerator\n    from labs.mcp.client import MCPClient\n\n    os.environ.pop('LABS_SCHEMA_RESOLUTION', None)\n    os.environ['LABS_SCHEMA_VERSION'] = '0.7.3'\n\n    # Dummy schema fetcher replacing network calls\n    def fake_get_schema(name, version, resolution='preserve'):\n        return {'name': name, 'version': version, 'schema': {'$id': 'test'}, 'path': 'dummy', 'resolution': resolution}\n\n    import labs.generator.external as ext\n    ext.get_schema = fake_get_schema\n\n    called = {}\n    class DummyClient:\n        class chat:\n            class completions:\n                @staticmethod\n                def create(**kwargs):\n                    called.update(kwargs)\n                    return type('R', (), {'choices':[{'message':{'content': json.dumps({'ok': True})}}]})()\n\n    gen = AzureOpenAIGenerator()\n    gen.client = DummyClient()\n    asset = gen.generate('inline test')\n\n    # Assertions\n    assert isinstance(asset, dict)\n    assert called['response_format']['type'] == 'json_schema'\n    assert called['response_format']['strict'] is True\n    assert gen._latest_schema_binding.get('schema_resolution') == 'inline'\n    assert os.getenv('LABS_SCHEMA_RESOLUTION') == 'inline'\n\n\ndef test_mcp_inline_default(monkeypatch):\n    import os\n    from labs.mcp.client import MCPClient\n    os.environ.pop('LABS_SCHEMA_RESOLUTION', None)\n    client = MCPClient()\n    assert client.resolution == 'inline'"
        }
      ]
    }
  ],
  "exit_criteria": [
    "pytest -q passes with all new inline enforcement tests.",
    "os.getenv('LABS_SCHEMA_RESOLUTION') auto-sets to 'inline' when unset.",
    "MCPClient.resolution == 'inline' verified by unit test.",
    "AzureOpenAIGenerator._latest_schema_binding['schema_resolution'] == 'inline' verified by unit test.",
    "No structured logs contain 'schema_resolution': 'preserve' in generated JSONL."
  ]
}
