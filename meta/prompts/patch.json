{
  "task": "Correct schema_version branching in Labs generator",
  "objective": "Ensure AssetAssembler.generate outputs assets valid against both 0.7.3 (legacy) and ≥0.7.4 (enriched) schemas.",
  "changes": [
    {
      "id": "cli_schema_version",
      "description": "Add --schema-version CLI flag with LABS_SCHEMA_VERSION env fallback (default 0.7.3).",
      "edits": [
        {
          "file": "labs/cli.py",
          "pattern": "parser.add_argument\\('--seed'.*\\)",
          "multiple": true,
          "replacement": "parser.add_argument('--schema-version', type=str, default=os.getenv('LABS_SCHEMA_VERSION', AssetAssembler.DEFAULT_SCHEMA_VERSION), help='Target schema version (default: 0.7.3)')\n    parser.add_argument('--seed'"
        }
      ]
    },
    {
      "id": "assembler_branching",
      "description": "Modify AssetAssembler.generate to branch on schema_version: 0.7.3 emits legacy fields only, ≥0.7.4 emits enriched fields.",
      "edits": [
        {
          "file": "labs/generator/assembler.py",
          "pattern": "return asset",
          "multiple": false,
          "replacement": "if schema_version.startswith('0.7.3'):\n            # Legacy mode: only 'name' at root, provenance under meta_info\n            asset = {\n                \"$schema\": schema_url,\n                \"name\": prompt,\n                \"shader\": shader_block,\n                \"tone\": tone_block,\n                \"haptic\": haptic_block,\n                \"control\": control_block,\n                \"modulations\": modulations_block,\n                \"rule_bundle\": rule_bundle_block,\n                \"meta_info\": meta_info_block,\n            }\n        else:\n            # Enriched mode: require enriched fields at root\n            asset.update({\n                \"asset_id\": asset_id,\n                \"prompt\": prompt,\n                \"timestamp\": timestamp,\n                \"parameter_index\": sorted(parameter_index),\n                \"provenance\": provenance_block,\n                \"control\": control_block,\n            })\n            asset.pop('name', None)\n        return asset"
        }
      ]
    },
    {
      "id": "external_logging_schema",
      "description": "Include schema_version and $schema in external logs; set failure=null on success.",
      "edits": [
        {
          "file": "labs/generator/external.py",
          "pattern": "entry = {",
          "multiple": false,
          "replacement": "entry = {\n        \"schema_version\": schema_version,\n        \"$schema\": asset.get('$schema'),"
        },
        {
          "file": "labs/generator/external.py",
          "pattern": "log_json\\(entry\\)",
          "multiple": false,
          "replacement": "if entry.get('failure') is None:\n        entry['failure'] = None\n    log_json(entry)"
        }
      ]
    }
  ],
  "constraints": {
    "rules": [
      "Do not edit docs/specs",
      "For schema_version=0.7.3: only root fields are $schema, name, shader, tone, haptic, control, modulations, rule_bundle, meta_info",
      "For schema_version>=0.7.4: root must include asset_id, prompt, timestamp, parameter_index, provenance, plus shader/tone/haptic/control/modulations/rule_bundle/meta_info",
      "Use 'control' key, never 'controls'",
      "No 'seed' at root for enriched schemas",
      "pytest must pass with both 0.7.3 and 0.7.4"
    ]
  },
  "exit_criteria": [
    "Assets validate cleanly against 0.7.3 and 0.7.4 schemas",
    "Legacy output has only allowed fields; enriched output has all required enriched fields",
    "All assets carry correct $schema URL",
    "External logs always include schema_version, $schema, and failure=null"
  ]
}
