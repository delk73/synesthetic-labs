{
  "task": "Implement schema_version-aware normalization in AssetAssembler",
  "objective": "Ensure AssetAssembler.generate produces schema-valid assets for both 0.7.3 (legacy) and ≥0.7.4 (enriched). Use dedicated _normalize_0_7_3 and _normalize_0_7_4 helpers. CLI and external logging must surface schema_version and $schema.",
  "changes": [
    {
      "id": "cli_schema_version",
      "description": "Add --schema-version CLI flag with LABS_SCHEMA_VERSION env fallback (default 0.7.3).",
      "edits": [
        {
          "file": "labs/cli.py",
          "pattern": "parser.add_argument\\('--seed'.*\\)",
          "multiple": true,
          "replacement": "parser.add_argument('--schema-version', type=str, default=os.getenv('LABS_SCHEMA_VERSION', AssetAssembler.DEFAULT_SCHEMA_VERSION), help='Target schema version (default: 0.7.3)')\n    parser.add_argument('--seed'"
        }
      ]
    },
    {
      "id": "assembler_generate",
      "description": "Route generate() output through schema_version-specific normalizers.",
      "edits": [
        {
          "file": "labs/generator/assembler.py",
          "pattern": "return asset",
          "multiple": false,
          "replacement": "if schema_version.startswith('0.7.3'):\n            asset = self._normalize_0_7_3(asset, prompt)\n        else:\n            asset = self._normalize_0_7_4(asset, prompt, asset_id, timestamp, parameter_index, provenance_block)\n        return asset"
        }
      ]
    },
    {
      "id": "assembler_normalizers",
      "description": "Add _normalize_0_7_3 and _normalize_0_7_4 helpers to enforce per-schema shape.",
      "edits": [
        {
          "file": "labs/generator/assembler.py",
          "pattern": "def _deterministic_identifiers",
          "multiple": false,
          "replacement": "def _normalize_0_7_3(self, asset: Dict[str, object], prompt: str) -> Dict[str, object]:\n        # Keep only fields allowed in 0.7.3\n        return {\n            \"$schema\": asset[\"$schema\"],\n            \"name\": asset.get(\"meta_info\", {}).get(\"title\", prompt),\n            \"shader\": {k: v for k, v in asset[\"shader\"].items() if k in (\"name\", \"description\", \"language\", \"sources\", \"uniforms\", \"meta_info\")},\n            \"tone\": {k: v for k, v in asset[\"tone\"].items() if k in (\"name\", \"description\", \"engine\", \"settings\", \"meta_info\")},\n            \"haptic\": {k: v for k, v in asset[\"haptic\"].items() if k in (\"device\", \"description\", \"input_parameters\", \"meta_info\")},\n            \"control\": asset[\"control\"],\n            \"modulations\": [],\n            \"rule_bundle\": {\"rules\": [], \"meta_info\": {\"version\": self.version}},\n            \"meta_info\": {\"provenance\": asset[\"meta_info\"].get(\"provenance\", {})},\n        }\n\n    def _normalize_0_7_4(self, asset: Dict[str, object], prompt: str, asset_id: str, timestamp: str, parameter_index: Sequence[str], provenance_block: Dict[str, object]) -> Dict[str, object]:\n        # Enriched schema: ensure enriched fields exist\n        asset.update({\n            \"asset_id\": asset_id,\n            \"prompt\": prompt,\n            \"timestamp\": timestamp,\n            \"parameter_index\": sorted(parameter_index),\n            \"provenance\": provenance_block\n        })\n        asset.pop(\"name\", None)\n        return asset\n\n    def _deterministic_identifiers"
        }
      ]
    },
    {
      "id": "external_logging",
      "description": "Include schema_version and $schema in external logs; set failure=null on success.",
      "edits": [
        {
          "file": "labs/generator/external.py",
          "pattern": "entry = {",
          "multiple": false,
          "replacement": "entry = {\n        \"schema_version\": schema_version,\n        \"$schema\": asset.get('$schema'),"
        },
        {
          "file": "labs/generator/external.py",
          "pattern": "log_json\\(entry\\)",
          "multiple": false,
          "replacement": "if entry.get('failure') is None:\n        entry['failure'] = None\n    log_json(entry)"
        }
      ]
    }
  ],
  "constraints": {
    "rules": [
      "Do not edit docs/specs",
      "0.7.3 output: root fields are $schema, name, shader, tone, haptic, control, modulations, rule_bundle, meta_info.provenance",
      "≥0.7.4 output: enriched fields required at root, no forbidden legacy extras",
      "Use 'control' key, never 'controls'",
      "pytest must pass for both schema_version=0.7.3 and 0.7.4"
    ]
  },
  "exit_criteria": [
    "0.7.3 assets validate cleanly without extra fields (no shader.input_parameters, no tone.effects, no haptic.profile, no modulations)",
    "0.7.4 assets validate with asset_id, prompt, timestamp, parameter_index, provenance at root",
    "All assets include correct $schema URL",
    "External logs always include schema_version, $schema, and failure=null",
    "pytest passes both modes"
  ]
}
