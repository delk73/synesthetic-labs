{
  "task": "Implement v0.3 External Generator features and finalize alignment",
  "objective": "Deliver optional Gemini/OpenAI generator integration, extend provenance and logging, and update documentation/tests to reflect v0.3 scope.",
  "changes": [
    {
      "id": "external_generator_interface",
      "description": "Add a pluggable ExternalGenerator interface for API-based generation.",
      "edits": [
        "Add labs/generator/external.py: define ExternalGenerator base class and Gemini/OpenAI implementations.",
        "Implement prompt â†’ JSON asset/patch pipeline with retry/backoff.",
        "Parse response into SynestheticAsset shape and inject provenance (engine, api_version, parameters)."
      ]
    },
    {
      "id": "cli_extension",
      "description": "Extend CLI to support --engine flag.",
      "edits": [
        "Update labs/cli.py: allow 'generate --engine=gemini' and 'generate --engine=openai'.",
        "Route to ExternalGenerator when engine flag is set.",
        "Persist provenance in generated asset metadata."
      ]
    },
    {
      "id": "validation_pipeline",
      "description": "Ensure external assets still flow through MCP + Critic.",
      "edits": [
        "Forward normalized API response to MCP validation via STDIO/socket/TCP.",
        "On failure, log structured reason/detail (e.g., 'validation_failed').",
        "Ensure critic reviews and logs outcome even on failure."
      ]
    },
    {
      "id": "logging_extension",
      "description": "Extend logging with external provenance and outcomes.",
      "edits": [
        "Write external generation runs to meta/output/labs/external.jsonl.",
        "Include raw prompt, raw API response, normalized asset, MCP result, critic review, provenance.",
        "Update labs/logging.py to handle new log stream."
      ]
    },
    {
      "id": "docs_refresh",
      "description": "Update docs to reflect v0.3 scope.",
      "edits": [
        "docs/labs_spec.md: add v0.3 External Generators scope, canonical baseline, validation, logging, exit criteria.",
        "README.md: document --engine flag, provenance fields, and external.jsonl log stream.",
        "AGENTS.md: snapshot updated with ExternalGenerator role."
      ]
    },
    {
      "id": "tests_external",
      "description": "Add tests for external generator integration.",
      "edits": [
        "tests/test_external_generator.py: mock API responses and confirm parsed asset/provenance.",
        "tests/test_pipeline.py: cover generate --engine flag end-to-end with mock.",
        "tests/test_logging.py: confirm external.jsonl structured entries."
      ]
    }
  ],
  "constraints": {
    "rules": [
      "No new runtime dependencies unless absolutely required for HTTP (prefer stdlib urllib/http).",
      "External generators must default to mock mode for CI (no live API calls).",
      "All generated assets, whether local or external, must pass through MCP validation.",
      "All tests must pass deterministically with mocks."
    ]
  },
  "exit_criteria": [
    "ExternalGenerator interface implemented for Gemini/OpenAI.",
    "CLI --engine flag functional and validated.",
    "External assets logged to external.jsonl with provenance.",
    "MCP validation and Critic review integrated into external path.",
    "Docs and README updated for v0.3 External Generators scope.",
    "Audit passes with no remaining divergences for v0.3."
  ]
}
