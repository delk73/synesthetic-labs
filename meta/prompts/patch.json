{
  "version": "v0.3.6a",
  "spec_ref": "docs/specs/synesthetic_labs_v0.3.6a.md#synesthetic-labs--spec-v0.3.6a",
  "task": "Remediate v0.3.6a audit gaps (Azure + Gemini alignment)",
  "objective": "Implement environment surfacing, Azure request support, deterministic parsing, enriched provenance, CLI validation routing, and fallback section filling to satisfy full spec compliance.",
  "changes": [
    {
      "id": "env-preload-azure-v0.3.6a",
      "description": "Expose Azure OpenAI and LABS_EXTERNAL_ENGINE variables in .env preloading, with warnings for missing credentials.",
      "edits": [
        {
          "file": "labs/cli.py",
          "pattern": "def _load_env_file",
          "multiple": false,
          "replacement": "def _load_env_file(path: str = '.env') -> None:\n    from dotenv import load_dotenv\n    if os.path.exists(path):\n        load_dotenv(path)\n    defaults = {\n        'LABS_SCHEMA_VERSION': '0.7.3',\n        'LABS_FAIL_FAST': '1',\n        'LABS_EXTERNAL_ENGINE': os.getenv('LABS_EXTERNAL_ENGINE', 'gemini'),\n        'GEMINI_MODEL': os.getenv('GEMINI_MODEL', 'gemini-2.0-flash'),\n        'AZURE_OPENAI_API_VERSION': os.getenv('AZURE_OPENAI_API_VERSION', '2025-01-01-preview')\n    }\n    for k, v in defaults.items():\n        os.environ.setdefault(k, v)\n    required = ['GEMINI_API_KEY', 'LABS_EXTERNAL_LIVE', 'AZURE_OPENAI_ENDPOINT', 'AZURE_OPENAI_API_KEY', 'AZURE_OPENAI_DEPLOYMENT']\n    for key in required:\n        if not os.getenv(key):\n            print(f'[WARN] Missing env variable: {key}')"
        }
      ]
    },
    {
      "id": "azure-generator-v0.3.6a",
      "description": "Add AzureOpenAIGenerator with structured JSON response_format and chat.completions endpoint using AZURE_OPENAI_* vars.",
      "edits": [
        {
          "file": "labs/generator/external.py",
          "pattern": "class OpenAIGenerator",
          "multiple": false,
          "replacement": "class AzureOpenAIGenerator(BaseGenerator):\n    engine = 'azure'\n\n    def __init__(self):\n        super().__init__()\n        from openai import AzureOpenAI\n        self.client = AzureOpenAI(\n            api_key=os.getenv('AZURE_OPENAI_API_KEY'),\n            azure_endpoint=os.getenv('AZURE_OPENAI_ENDPOINT'),\n            api_version=os.getenv('AZURE_OPENAI_API_VERSION', '2025-01-01-preview')\n        )\n        self.deployment = os.getenv('AZURE_OPENAI_DEPLOYMENT', 'gpt-4o-mini')\n\n    def generate(self, prompt: str, **kwargs) -> dict:\n        try:\n            response = self.client.chat.completions.create(\n                model=self.deployment,\n                messages=[{\"role\": \"user\", \"content\": prompt}],\n                response_format={\"type\": \"json_object\"}\n            )\n            text = response.choices[0].message.content\n            return json.loads(text)\n        except Exception as e:\n            self._logger.error(f'Azure generation failed: {e}')\n            raise"
        }
      ]
    },
    {
      "id": "response-parse-unify-v0.3.6a",
      "description": "Enforce deterministic parsing for Gemini and Azure/OpenAI structured responses.",
      "edits": [
        {
          "file": "labs/generator/external.py",
          "pattern": "def _parse_response",
          "multiple": false,
          "replacement": "def _parse_response(self, resp: dict, engine: str = 'gemini') -> dict:\n    try:\n        if engine == 'gemini':\n            text = resp['candidates'][0]['content']['parts'][0]['text']\n        elif engine in ('azure', 'openai'):\n            text = resp['choices'][0]['message']['content']\n        else:\n            raise ValueError(f'Unknown engine: {engine}')\n        return json.loads(text)\n    except Exception as e:\n        self._logger.error(f'Parse error for {engine} response: {e}')\n        raise"
        }
      ]
    },
    {
      "id": "provenance-enrich-v0.3.6a",
      "description": "Extend _build_asset_provenance() to include endpoint, deployment, api_version, and input_parameters for â‰¥0.7.4 schemas.",
      "edits": [
        {
          "file": "labs/generator/assembler.py",
          "pattern": "def _build_asset_provenance",
          "multiple": false,
          "replacement": "def _build_asset_provenance(engine: str, input_parameters: dict) -> dict:\n    trace_id = str(uuid.uuid4())\n    provenance = {\n        'engine': engine,\n        'endpoint': os.getenv('AZURE_OPENAI_ENDPOINT') or os.getenv('GEMINI_ENDPOINT'),\n        'deployment': os.getenv('AZURE_OPENAI_DEPLOYMENT'),\n        'api_version': os.getenv('AZURE_OPENAI_API_VERSION', ''),\n        'trace_id': trace_id,\n        'input_parameters': input_parameters or {}\n    }\n    return provenance"
        }
      ]
    },
    {
      "id": "cli-validation-flow-v0.3.6a",
      "description": "Add invoke_mcp() wrapper in validate.py and route CLI generation through it with strict/relaxed persistence.",
      "edits": [
        {
          "file": "labs/mcp/validate.py",
          "pattern": "def validate_asset",
          "multiple": true,
          "replacement": "def invoke_mcp(asset: dict, strict: bool = True) -> dict:\n    result = validate_asset(asset)\n    if strict:\n        if not result.get('ok'):\n            raise ValidationError('strict validation failed')\n    else:\n        if not result.get('ok'):\n            print('[WARN] relaxed validation: asset persisted with warnings')\n    return result"
        },
        {
          "file": "labs/cli.py",
          "pattern": "critic.review",
          "multiple": false,
          "replacement": "from labs.mcp.validate import invoke_mcp\n        review = invoke_mcp(asset, strict=bool(args.strict))"
        }
      ]
    },
    {
      "id": "fallback-fillers-v0.3.6a",
      "description": "Introduce deterministic fallback fillers for shader, tone, haptic, and control sections.",
      "edits": [
        {
          "file": "labs/generator/assembler.py",
          "pattern": "class AssetAssembler",
          "multiple": false,
          "replacement": "class AssetAssembler:\n    @staticmethod\n    def default_shader():\n        return {'type': 'fragment', 'code': '// default shader'}\n\n    @staticmethod\n    def default_tone():\n        return {'type': 'sine', 'frequency': 440.0}\n\n    @staticmethod\n    def default_haptic():\n        return {'pattern': 'pulse', 'duration_ms': 120}\n\n    @staticmethod\n    def default_control():\n        return {'sensitivity': 1.0, 'range': [0, 1]}\n\n    @staticmethod\n    def fill_empty_sections(asset: dict) -> dict:\n        for field, fn in {\n            'shader': AssetAssembler.default_shader,\n            'tone': AssetAssembler.default_tone,\n            'haptic': AssetAssembler.default_haptic,\n            'control': AssetAssembler.default_control\n        }.items():\n            if not asset.get(field):\n                asset[field] = fn()\n        return asset"
        }
      ]
    }
  ],
  "exit_criteria": [
    "All Azure environment variables (AZURE_OPENAI_*) load and warn if unset.",
    "AzureOpenAIGenerator successfully produces structured JSON assets via chat.completions.",
    "Gemini and Azure responses parse deterministically (no function_call fallbacks).",
    "Provenance for 0.7.4+ includes engine, endpoint, deployment, api_version, and input_parameters.",
    "CLI generate command routes through invoke_mcp() and persists relaxed assets with warnings.",
    "Legacy assets (0.7.3) fill empty shader/tone/haptic/control sections with deterministic defaults."
  ]
}
