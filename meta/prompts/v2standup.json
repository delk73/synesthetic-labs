{
  "meta": {
    "version": "2.0.0",
    "created": "2025-10-27",
    "purpose": "Standup script for Synesthetic Labs v2 - minimal schema-driven architecture",
    "schema_version": "0.7.3",
    "schema_lock": "This standup is confined to schema version 0.7.3 - do not mix versions",
    "references": [
      "LESSONS_LEARNED.md",
      "AGENTS.md (v0.3.6a state)"
    ]
  },
  "context": {
    "previous_version": "0.3.6a",
    "archived_branch": "archive/v0.3.6a",
    "core_problem": "v0.3.6a failed to achieve MCP validation due to: schema authority confusion, hardcoded template generators, premature abstraction, and tests validating against wrong schemas",
    "key_insight": "MCP is the ONLY schema authority. Generators must be schema-driven, not template-based. Prove minimal implementation before adding features."
  },
  "principles": [
    "MCP is single source of truth for schemas - never cache to disk",
    "Schema-driven generation - read structure from MCP, don't hardcode templates",
    "Test-first development - prove MCP validation passes before adding features",
    "Minimal core first - single generator, single test, then extend",
    "No normalization layers - generators output correct structure initially",
    "Inline schema resolution by default - required for strict validation",
    "One schema version per standup - version 0.7.3 locked for this environment",
    "Self-contained labs - templated structure, environment isolated per schema version"
  ],
  "standup_steps": [
    {
      "step": 1,
      "phase": "preserve_working_code",
      "description": "Extract and preserve the components that work from v0.3.6a",
      "actions": [
        {
          "action": "copy_mcp_client",
          "files": [
            "labs/mcp/client.py",
            "labs/mcp/validate.py",
            "labs/mcp/exceptions.py",
            "labs/mcp/__init__.py"
          ],
          "rationale": "MCP client is solid - fetches schemas correctly, validates strictly"
        },
        {
          "action": "extract_env_setup_pattern",
          "source": "labs/cli.py:18-24",
          "pattern": "Preload .env, lock LABS_SCHEMA_VERSION=0.7.3, force LABS_SCHEMA_RESOLUTION=inline",
          "rationale": "Early environment configuration prevents downstream issues"
        },
        {
          "action": "preserve_logging_structure",
          "source": "labs/logging.py",
          "keep": "JSONL structured logging with telemetry",
          "rationale": "Observable systems are debuggable systems"
        }
      ]
    },
    {
      "step": 2,
      "phase": "minimal_directory_structure",
      "description": "Create clean v2 directory structure with minimal dependencies - templated and self-contained",
      "environment": {
        "schema_version": "0.7.3",
        "isolation": "All schema-specific code lives in versioned namespace",
        "template": "Repeatable standup pattern for future schema versions"
      },
      "structure": {
        "root": [
          "README.md (v2 architecture overview)",
          "LESSONS_LEARNED.md (copy from v0.3.6a)",
          "requirements.txt (minimal: jsonschema, httpx, pydantic, python-dotenv)",
          ".env.example",
          ".gitignore"
        ],
        "labs/": [
          "__init__.py",
          "mcp/ (copied from v0.3.6a - working code)",
          "transport.py (required by mcp/)",
          "mcp_stdio.py (required by mcp/)",
          "logging.py (copied from v0.3.6a)",
          "core.py (path utilities)",
          "v0_7_3/ (NEW: schema version namespace)",
          "  __init__.py",
          "  generator.py (schema-driven generator for 0.7.3)",
          "  validator.py (0.7.3-specific validation helpers)",
          "  .env.0.7.3 (version-specific environment)"
        ],
        "tests/": [
          "conftest.py",
          "test_mcp_client.py (prove MCP client works)",
          "v0_7_3/ (schema version test namespace)",
          "  __init__.py",
          "  test_validation.py (THE test - generate â†’ validate for 0.7.3)",
          "  test_generator.py (0.7.3 generator tests)"
        ],
        "meta/": [
          "prompts/ (keep v2standup.json)",
          "output/ (logs, telemetry)",
          "schemas/ (reference - MCP is authority)",
          "  0.7.3/ (cached for reference only)",
          "  template/ (standup template for future versions)"
        ]
      },
      "exclude": [
        "labs/agents/ (critic - premature)",
        "labs/experimental/ (added before core worked)",
        "labs/lifecycle/ (patches - shouldn't need normalization)",
        "labs/generator/assembler.py (complex orchestration)",
        "labs/generator/shader.py, tone.py, etc. (hardcoded templates)",
        "labs/generator/external.py (Azure/Gemini - add after core works)",
        "meta/schemas/ (stub schemas - wrong authority)",
        "docs/ (documentation without working code)"
      ]
    },
    {
      "step": 3,
      "phase": "create_minimal_generator",
      "description": "Build single schema-driven generator that reads from MCP - confined to 0.7.3",
      "implementation": {
        "file": "labs/v0_7_3/generator.py",
        "namespace": "labs.v0_7_3",
        "schema_version_lock": "0.7.3",
        "core_function": "generate_asset(mcp_client, prompt: str) -> dict",
        "algorithm": [
          "1. Fetch schema from MCP via load_schema_bundle(client=mcp_client, version='0.7.3')",
          "2. Extract required fields from schema['required']",
          "3. Read property schemas from schema['properties']",
          "4. For each required field, determine structure from schema:",
          "   - Handle anyOf by picking first valid option",
          "   - Read nested required fields from selected anyOf option",
          "   - Build structure matching schema, not hardcoded templates",
          "5. Return asset dict with correct structure"
        ],
        "key_points": [
          "NO hardcoded templates (_FRAGMENT_SHADER, _UNIFORMS, etc.)",
          "NO assumptions about field names (read from schema)",
          "For anyOf/oneOf: pick first option, extract its required fields",
          "Example: shader anyOf[0] requires fragment_shader, name, vertex_shader (NOT sources object)"
        ]
      }
    },
    {
      "step": 4,
      "phase": "write_validation_test",
      "description": "Create THE test - single test that proves MCP validation for 0.7.3",
      "implementation": {
        "file": "tests/v0_7_3/test_validation.py",
        "namespace": "tests.v0_7_3",
        "schema_version": "0.7.3",
        "test_function": "test_generator_passes_mcp_strict_validation_0_7_3()",
        "steps": [
          "1. client = MCPClient(schema_version='0.7.3')",
          "2. from labs.v0_7_3.generator import generate_asset",
          "3. asset = generate_asset(client, prompt='test asset')",
          "4. assert asset['version'] == '0.7.3'  # Schema version check",
          "5. result = client.validate(asset, strict=True)",
          "6. assert result['valid'] is True, f\"MCP validation failed: {result.get('errors', [])}\"",
          "7. Print asset structure for inspection"
        ],
        "success_criteria": "Test passes with strict=True MCP validation",
        "rationale": "This test failing means core doesn't work. Nothing else matters until this passes."
      }
    },
    {
      "step": 5,
      "phase": "tdd_iteration",
      "description": "TDD loop until validation test passes",
      "process": [
        "1. Run test: pytest tests/v0_7_3/test_validation.py -v",
        "2. Test fails with MCP validation errors",
        "3. Examine error: which field is wrong? missing? wrong type?",
        "4. Fix labs/v0_7_3/generator.py to read that field from schema correctly",
        "5. Verify asset['version'] == '0.7.3' (schema version confined)",
        "6. Repeat until test passes",
        "7. DO NOT add features - only fix to match 0.7.3 schema"
      ],
      "debugging_tips": [
        "Print schema structure: print(json.dumps(schema, indent=2))",
        "Print generated asset: print(json.dumps(asset, indent=2))",
        "Compare: does asset structure match schema required fields?",
        "Check anyOf: did we pick the right option? read its required fields?",
        "Validate incrementally: start with top-level required, then nested"
      ]
    },
    {
      "step": 6,
      "phase": "verify_minimal_works",
      "description": "Confirm minimal implementation passes all criteria",
      "checklist": [
        {
          "criterion": "Generator reads schema from MCP",
          "verification": "Code calls load_schema_bundle(client=...) - no disk file reads",
          "status": "must_pass"
        },
        {
          "criterion": "Asset structure matches MCP schema",
          "verification": "Field names match schema properties (e.g., vertex_shader not sources.fragment)",
          "status": "must_pass"
        },
        {
          "criterion": "MCP strict validation passes",
          "verification": "client.validate(asset, strict=True)['valid'] == True",
          "status": "must_pass"
        },
        {
          "criterion": "No hardcoded templates",
          "verification": "Grep for _FRAGMENT_SHADER, _UNIFORMS - should find nothing",
          "status": "must_pass"
        },
        {
          "criterion": "No stub schema files",
          "verification": "meta/schemas/ directory doesn't exist or is documented as non-authoritative",
          "status": "must_pass"
        }
      ]
    },
    {
      "step": 7,
      "phase": "extend_incrementally",
      "description": "Only after minimal works, add features one at a time",
      "phases": [
        {
          "phase": "2.1",
          "name": "external_llm_content",
          "description": "Add Azure/Gemini for rich content generation",
          "approach": "Use LLM to generate shader code, descriptions, BUT still use schema-driven structure assembly",
          "test_first": "test_external_generator_passes_mcp_validation()",
          "rationale": "LLM generates content (code), schema drives structure (field names/nesting)"
        },
        {
          "phase": "2.2",
          "name": "cli_interface",
          "description": "Add CLI for user interaction",
          "features": "labs generate <prompt>, labs validate <file>",
          "test_first": "test_cli_generate_validates()"
        },
        {
          "phase": "2.3",
          "name": "multi_component",
          "description": "Support generating multiple components (shader+tone+control)",
          "approach": "Extend generator to read all component schemas, build each from schema",
          "test_first": "test_multi_component_validates()"
        },
        {
          "phase": "3.0",
          "name": "advanced_features",
          "description": "Critic agents, patch lifecycle, etc.",
          "requirement": "Only add after phases 2.1-2.3 all pass MCP validation"
        }
      ]
    }
  ],
  "anti_patterns": {
    "do_not": [
      {
        "pattern": "Add documentation before code works",
        "why": "Docs don't fix architecture - users called it 'cruft'",
        "instead": "Fix code first, document working system"
      },
      {
        "pattern": "Cache schemas to disk 'for reference'",
        "why": "Creates divergence - stubs don't match MCP reality",
        "instead": "Fetch from MCP every time, cache in memory if needed"
      },
      {
        "pattern": "Add normalization to fix generator output",
        "why": "Normalization is a band-aid for wrong generators",
        "instead": "Make generators output correct structure initially"
      },
      {
        "pattern": "Support multiple schema versions before one works",
        "why": "Complexity explosion without validated foundation",
        "instead": "Support ONE version (0.7.3), upgrade when ready"
      },
      {
        "pattern": "Add features before core validation passes",
        "why": "Building on unvalidated foundation - entire system fails",
        "instead": "Prove test_validation.py passes, then extend"
      }
    ]
  },
  "success_metrics": {
    "phase_1_complete": "test_validation.py passes with strict=True MCP validation",
    "phase_2_complete": "External LLM generates content, structure still schema-driven, validates",
    "phase_3_complete": "Full feature set works with continuous MCP validation",
    "definition_of_done": "Can generate rich synesthetic assets that pass MCP strict validation consistently"
  },
  "migration_notes": {
    "from_v0_3_6a": {
      "copy": [
        "labs/mcp/ (entire directory - works correctly)",
        "labs/logging.py (structured logging)",
        "Environment setup pattern from labs/cli.py:18-24",
        "LESSONS_LEARNED.md (this document's context)"
      ],
      "rewrite": [
        "All generators - make schema-driven instead of template-based",
        "All tests - use MCPClient.fetch_schema() not disk files"
      ],
      "delete": [
        "labs/agents/",
        "labs/experimental/",
        "labs/lifecycle/",
        "labs/generator/assembler.py",
        "labs/generator/shader.py, tone.py, control.py, haptic.py, meta.py",
        "labs/generator/external.py (temporarily - add back in phase 2.1)",
        "meta/schemas/ (stub files)",
        "docs/ (documentation of broken system)",
        "Most tests (keep only MCP client tests)"
      ]
    }
  },
  "workflow": {
    "schema_version_isolation": {
      "principle": "Each schema version gets its own namespace to prevent version mixing",
      "structure": [
        "labs/v0_7_3/ - All 0.7.3-specific code",
        "tests/v0_7_3/ - All 0.7.3-specific tests",
        "meta/schemas/0.7.3/ - Cached reference (MCP is still authority)",
        ".env.0.7.3 - Version-specific environment variables"
      ],
      "benefits": [
        "Clear separation - no version mixing bugs",
        "Can support multiple versions side-by-side if needed",
        "Easy to upgrade - create new namespace for next version",
        "Testable - each version has its own test suite",
        "Self-contained - all 0.7.3 code in one place"
      ],
      "upgrade_path": "To support 0.7.4: Create labs/v0_7_4/, tests/v0_7_4/, follow same pattern"
    },
    "standup_execution": [
      "1. Read LESSONS_LEARNED.md for context",
      "2. Execute steps 1-2: Copy working code, create minimal structure",
      "3. Execute step 3: Write schema-driven generator.py",
      "4. Execute step 4: Write test_validation.py",
      "5. Execute step 5: TDD loop until test passes",
      "6. Execute step 6: Verify all criteria met",
      "7. Commit: 'v2.0.0 minimal - MCP validation passing'",
      "8. Only then: Execute step 7 - extend incrementally"
    ],
    "development_loop": [
      "For each new feature:",
      "1. Write test that uses MCP validation for 0.7.3",
      "2. Implement feature in labs/v0_7_3/ reading from schema",
      "3. Run test - if fails, examine MCP errors",
      "4. Fix to match 0.7.3 schema structure",
      "5. Verify asset['version'] == '0.7.3'",
      "6. Test passes - commit",
      "7. Next feature"
    ],
    "template_for_future_versions": {
      "description": "When MCP releases 0.7.4, 0.8.0, etc., follow this template",
      "steps": [
        "1. Create meta/prompts/v{version}standup.json (copy v2standup.json template)",
        "2. Update meta.schema_version to new version",
        "3. Create labs/v{version}/ namespace",
        "4. Create tests/v{version}/ namespace",
        "5. Copy reference schema to meta/schemas/{version}/",
        "6. Follow same standup steps - TDD minimal generator",
        "7. Prove validation passes before extending",
        "8. Keep old version namespaces intact (no breaking changes)"
      ],
      "example": "For 0.7.4: labs/v0_7_4/, tests/v0_7_4/, .env.0.7.4, meta/prompts/v0_7_4_standup.json"
    }
  },
  "environment_template": {
    "description": "Self-contained environment configuration per schema version",
    "file": ".env.0.7.3",
    "variables": {
      "LABS_SCHEMA_VERSION": "0.7.3",
      "LABS_SCHEMA_RESOLUTION": "inline",
      "LABS_SCHEMA_NAMESPACE": "v0_7_3",
      "LABS_MCP_HOST": "localhost",
      "LABS_MCP_PORT": "3000",
      "LABS_OUTPUT_DIR": "meta/output/v0_7_3/"
    },
    "loading": "Load via python-dotenv in labs/v0_7_3/__init__.py",
    "rationale": "Version-specific environment prevents cross-version contamination"
  },
  "reference_code_snippets": {
    "schema_driven_generator_pattern": {
      "description": "Core pattern for reading schema and building structure - version namespaced",
      "file": "labs/v0_7_3/generator.py",
      "code": [
        "\"\"\"Schema-driven generator for synesthetic assets (0.7.3).\"\"\"",
        "",
        "from labs.mcp.client import load_schema_bundle",
        "",
        "SCHEMA_VERSION = '0.7.3'",
        "",
        "def generate_asset(mcp_client, prompt: str) -> dict:",
        "    # Fetch schema - single source of truth",
        "    schema = load_schema_bundle(client=mcp_client, version=SCHEMA_VERSION)",
        "    ",
        "    # Read structure from schema",
        "    required = schema.get('required', [])",
        "    properties = schema.get('properties', {})",
        "    ",
        "    # Build asset matching schema",
        "    asset = {",
        "        '$schema': f'https://synesthetic.dev/schemas/{SCHEMA_VERSION}/synesthetic-asset.schema.json',",
        "        'version': SCHEMA_VERSION  # Version lock",
        "    }",
        "    ",
        "    for field in required:",
        "        prop_schema = properties[field]",
        "        ",
        "        # Handle anyOf: pick first option",
        "        if 'anyOf' in prop_schema:",
        "            option_schema = prop_schema['anyOf'][0]",
        "        else:",
        "            option_schema = prop_schema",
        "        ",
        "        # Build field from schema structure",
        "        asset[field] = build_from_schema(option_schema, prompt)",
        "    ",
        "    return asset"
      ]
    },
    "validation_test_pattern": {
      "description": "The test that proves everything works - version confined",
      "file": "tests/v0_7_3/test_validation.py",
      "code": [
        "\"\"\"Validation tests for 0.7.3 generator.\"\"\"",
        "",
        "from labs.mcp.client import MCPClient",
        "from labs.v0_7_3.generator import generate_asset, SCHEMA_VERSION",
        "",
        "def test_mcp_validation_0_7_3():",
        "    client = MCPClient(schema_version=SCHEMA_VERSION)",
        "    asset = generate_asset(client, 'peaceful waves')",
        "    ",
        "    # Version confinement check",
        "    assert asset['version'] == SCHEMA_VERSION, f\"Expected {SCHEMA_VERSION}, got {asset['version']}\"",
        "    ",
        "    # MCP strict validation",
        "    result = client.validate(asset, strict=True)",
        "    assert result['valid'] is True, f\"Errors: {result.get('errors', [])}\"",
        "    ",
        "    print(f'âœ… Asset validated for {SCHEMA_VERSION}: {asset}')"
      ]
    },
    "namespace_init_pattern": {
      "description": "Version namespace initialization with environment loading",
      "file": "labs/v0_7_3/__init__.py",
      "code": [
        "\"\"\"Synesthetic Labs - Schema version 0.7.3 namespace.\"\"\"",
        "",
        "import os",
        "from pathlib import Path",
        "from dotenv import load_dotenv",
        "",
        "SCHEMA_VERSION = '0.7.3'",
        "",
        "# Load version-specific environment",
        "env_file = Path(__file__).parent.parent.parent / f'.env.{SCHEMA_VERSION}'",
        "if env_file.exists():",
        "    load_dotenv(env_file)",
        "",
        "# Verify schema version lock",
        "loaded_version = os.getenv('LABS_SCHEMA_VERSION')",
        "if loaded_version and loaded_version != SCHEMA_VERSION:",
        "    raise ValueError(f'Schema version mismatch: namespace={SCHEMA_VERSION}, env={loaded_version}')",
        "",
        "from .generator import generate_asset",
        "",
        "__all__ = ['generate_asset', 'SCHEMA_VERSION']"
      ]
    }
  },
  "self_contained_checklist": {
    "description": "Verify the labs environment is properly self-contained for 0.7.3",
    "checks": [
      {
        "item": "Schema version lock",
        "verify": "labs/v0_7_3/generator.py has SCHEMA_VERSION = '0.7.3' constant",
        "rationale": "Prevents accidental version mixing"
      },
      {
        "item": "Namespace isolation",
        "verify": "All 0.7.3 code in labs/v0_7_3/, all tests in tests/v0_7_3/",
        "rationale": "Clear separation, no cross-contamination"
      },
      {
        "item": "Version-specific environment",
        "verify": ".env.0.7.3 exists and loads in labs/v0_7_3/__init__.py",
        "rationale": "Isolated configuration per version"
      },
      {
        "item": "Schema reference cached",
        "verify": "meta/schemas/0.7.3/ has reference copy (MCP is still authority)",
        "rationale": "Offline reference, but always validate against MCP"
      },
      {
        "item": "Test namespace",
        "verify": "tests/v0_7_3/ contains all 0.7.3 tests",
        "rationale": "Version-specific test suite"
      },
      {
        "item": "Import pattern",
        "verify": "Tests import from labs.v0_7_3, never from labs.generator",
        "rationale": "Explicit version imports prevent mistakes"
      },
      {
        "item": "Output isolation",
        "verify": "Logs go to meta/output/v0_7_3/",
        "rationale": "Version-specific telemetry"
      },
      {
        "item": "Template ready",
        "verify": "meta/prompts/ contains template for future v0_7_4 standup",
        "rationale": "Repeatable pattern for next version"
      }
    ]
  }
}
