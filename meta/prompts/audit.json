{
  "$schema": "https://schemas.synesthetic.dev/audit-spec.schema.json",
  "version": "v0.3.4",
  "spec_ref": "docs/labs_spec.md#synesthetic-labs-spec-v0.3.4-core",
  "style": "deterministic-terse",
  "output": {
    "paths": ["meta/output/labs_state.md", "AGENTS.md"],
    "format": "markdown",
    "must_write": true
  },
  "rules": [
    {
      "id": "schema-branching",
      "section": "2 · Schema-Targeting Hardening",
      "requirement": "Generator MUST branch by schema_version and inject $schema URL.",
      "verify": [
        {"path": "labs/generator/assembler.py", "match": ["$schema", "schema_version"]},
        {"path": "tests/test_generator_assembler.py", "match": ["0.7.3", "0.7.4"]}
      ]
    },
    {
      "id": "mcp-validation-modes",
      "section": "7 · Validation Rules",
      "requirement": "Strict and relaxed runs MUST both invoke MCP; persistence only if mcp_response.ok is true.",
      "verify": [
        {"path": "labs/cli.py", "match": ["mcp_response", "ok"]},
        {"path": "labs/agents/critic.py", "match": ["mcp_unavailable", "strict"]},
        {"path": "tests/test_pipeline.py", "match": ["relaxed", "ok", "persist", "False"]}
      ]
    },
    {
      "id": "env-preload",
      "section": "4 · Environment — Preload Rule",
      "requirement": "CLI MUST preload .env, merge with os.environ, warn when keys missing.",
      "verify": [
        {"path": "labs/cli.py", "match": ["dotenv", "load", "warning|warn|missing|GEMINI_API_KEY|OPENAI_API_KEY"], "regex": true},
        {"path": "requirements.txt", "match": ["python-dotenv|dotenv"], "regex": true}
      ]
    },
    {
      "id": "tcp-default",
      "section": "7 · Validation Rules (transport provenance)",
      "requirement": "TCP MUST be default transport when MCP_ENDPOINT unset/invalid.",
      "verify": [
        {"path": "labs/mcp_stdio.py", "match": ["tcp", "default", "resolve_mcp_endpoint"]},
        {"path": "tests/test_tcp.py", "match": ["default", "tcp"]}
      ]
    },
    {
      "id": "gemini-structured-request",
      "section": "5.1 · Structured Output (Gemini)",
      "requirement": "Gemini request MUST include contents/parts/text and generationConfig.responseMimeType='application/json'.",
      "verify": [
        {"path": "labs/generator/external.py", "match": ["contents", "parts", "text", "generationConfig", "responseMimeType", "application/json"]}
      ]
    },
    {
      "id": "gemini-structured-response-parse",
      "section": "5.1 · Structured Output (Gemini)",
      "requirement": "Response MUST be parsed from candidates[0].content.parts[0].text and json-decoded to asset.",
      "verify": [
        {"path": "labs/generator/external.py", "match": ["candidates[0].content.parts[0].text", "json.loads|json_loads"], "regex": true},
        {"path": "tests/test_external_generator.py", "match": ["candidates", "parts", "responseMimeType", "json"], "regex": true}
      ]
    },
    {
      "id": "external-limits-retry",
      "section": "5.2 · Headers & Limits",
      "requirement": "Enforce 256KiB req / 1MiB resp caps; no-retry on 4xx; correct headers.",
      "verify": [
        {"path": "labs/generator/external.py", "match": ["256 * 1024|262144", "1024 * 1024|1048576"], "regex": true},
        {"path": "labs/generator/external.py", "match": ["X-Goog-Api-Key|Authorization"], "regex": true},
        {"path": "tests/test_external_generator.py", "match": ["no-retry", "4\\d\\d|400|404"], "regex": true}
      ]
    },
    {
      "id": "logging-provenance",
      "section": "8 · Logging",
      "requirement": "external.jsonl MUST record engine, endpoint, schema_version, trace_id, reason/detail on failures.",
      "verify": [
        {"path": "labs/logging.py", "match": ["external.jsonl"]},
        {"path": "labs/generator/external.py", "match": ["schema_version", "trace_id", "reason", "detail"]}
      ]
    },
    {
      "id": "normalization-contract",
      "section": "6 · Normalization Contract",
      "requirement": "Unknown keys/wrong types → bad_response; numeric bounds → out_of_range.",
      "verify": [
        {"path": "labs/generator/external.py", "match": ["bad_response", "out_of_range"]},
        {"path": "tests/test_external_generator.py", "match": ["bad_response|out_of_range"], "regex": true}
      ]
    },
    {
      "id": "deprecated-knobs",
      "section": "Docs hygiene",
      "requirement": "LABS_EXTERNAL_LIVE removed or explicitly deprecated in code/docs.",
      "verify": [
        {"path": "README.md", "match": ["LABS_EXTERNAL_LIVE"], "absent": true},
        {"path": ".example.env", "match": ["LABS_EXTERNAL_LIVE"], "absent": true}
      ]
    }
  ],
  "report": {
    "sections": [
      "Summary of repo state",
      "Alignment (table: Rule → Status → Evidence)",
      "Top gaps & fixes",
      "Recommendations"
    ],
    "status_values": ["Present", "Missing", "Divergent"]
  },
  "exit_criteria": [
    "meta/output/labs_state.md non-empty",
    "AGENTS.md overwritten (non-empty)",
    "Every rule reported with Present/Missing/Divergent and ≤3 evidence lines"
  ]
}
