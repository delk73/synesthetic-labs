{
  "version": "v0.3.6a",
  "spec_ref": "docs/specs/synesthetic_labs_v0.3.6a.md#synesthetic-labs--spec-v0.3.6a",
  "output": {
    "paths": ["meta/output/labs_state.md", "AGENTS.md"],
    "format": "markdown",
    "must_write": true
  },
  "rules": [
    {
      "id": "env-preload-v0.3.6a",
      "section": "4 · Environment",
      "requirement": "CLI must preload .env and surface both Gemini and Azure variables: LABS_SCHEMA_VERSION, LABS_FAIL_FAST, LABS_EXTERNAL_ENGINE, GEMINI_MODEL, GEMINI_API_KEY, LABS_EXTERNAL_LIVE, AZURE_OPENAI_ENDPOINT, AZURE_OPENAI_API_KEY, AZURE_OPENAI_DEPLOYMENT, and AZURE_OPENAI_API_VERSION.",
      "verify": [
        {
          "path": "labs/cli.py",
          "match": [
            "dotenv",
            "load",
            "LABS_SCHEMA_VERSION",
            "LABS_FAIL_FAST",
            "LABS_EXTERNAL_ENGINE",
            "GEMINI_MODEL",
            "GEMINI_API_KEY",
            "LABS_EXTERNAL_LIVE",
            "AZURE_OPENAI_ENDPOINT",
            "AZURE_OPENAI_API_KEY",
            "AZURE_OPENAI_DEPLOYMENT",
            "AZURE_OPENAI_API_VERSION"
          ]
        },
        { "path": "requirements.txt", "match": ["python-dotenv"] }
      ]
    },
    {
      "id": "mcp-schema-pull-v0.3.6a",
      "section": "6 · Schema Retrieval (MCP)",
      "requirement": "All generators must call mcp.core.get_schema('synesthetic-asset') and use the returned schema for normalization and $schema URL resolution.",
      "verify": [
        {
          "path": "labs/generator/external.py",
          "match": ["from mcp.core import get_schema", "get_schema(", "\"synesthetic-asset\"", "$schema"]
        },
        { "path": "tests/test_mcp_schema_pull.py", "match": ["get_schema", "list_schemas", "assert", "ok"] }
      ]
    },
    {
      "id": "gemini-schema-binding-v0.3.6a",
      "section": "7.1 · Gemini Request Contract",
      "requirement": "Gemini requests must embed the sanitized MCP schema under generation_config.response_schema.jsonSchema.$ref, log schema_binding:true, and exclude unsupported JSON Schema keys.",
      "verify": [
        {
          "path": "labs/generator/external.py",
          "match": ["generation_config", "response_schema", "jsonSchema", "_sanitize_schema_for_gemini", "schema_binding"]
        },
        { "path": "tests/test_external_generator.py", "match": ["generation_config", "response_schema", "schema_binding"] }
      ]
    },
    {
      "id": "azure-schema-binding-v0.3.6a",
      "section": "7.2 · Azure Request Contract",
      "requirement": "AzureOpenAIGenerator must construct chat.completions requests with model=os.getenv('AZURE_OPENAI_DEPLOYMENT'), response_format={'type':'json_object'}, and a valid structured JSON response path.",
      "verify": [
        {
          "path": "labs/generator/external.py",
          "match": ["AzureOpenAI", "response_format", "json_object", "AZURE_OPENAI_DEPLOYMENT"]
        },
        { "path": "tests/test_external_generator.py", "match": ["AzureOpenAI", "json_object", "response_format"] }
      ]
    },
    {
      "id": "response-parse-v0.3.6a",
      "section": "7 · Request / Response Contract",
      "requirement": "Responses must be parsed deterministically — Gemini via candidates[0].content.parts[0].text, Azure via response.choices[0].message.content — and JSON-decoded.",
      "verify": [
        {
          "path": "labs/generator/external.py",
          "match": ["candidates", "content", "parts", "text", "json.loads", "response.choices[0].message.content"]
        },
        { "path": "tests/test_external_generator.py", "match": ["candidates", "message.content", "json.loads"] }
      ]
    },
    {
      "id": "normalization-schema-0.7.3-v0.3.6a",
      "section": "8 · Normalization & Semantic Filling",
      "requirement": "When schema_version == '0.7.3', the asset must include $schema and fully populated shader, tone, haptic, and control scaffolds using default fill helpers; provenance omitted.",
      "verify": [
        {
          "path": "labs/generator/assembler.py",
          "match": ["_normalize_0_7_3", "_fill_empty_sections", "AssetAssembler.default_", "asset['$schema']", "if schema_version == '0.7.3'"]
        },
        {
          "path": "tests/test_generator.py",
          "match": ["0.7.3", "assert '$schema' in result", "shader", "tone", "haptic", "control"]
        }
      ]
    },
    {
      "id": "provenance-enriched-schema-v0.3.6a",
      "section": "9 · Provenance Schema",
      "requirement": "For schema_version >= '0.7.4', provenance must include engine, endpoint, deployment, trace_id, api_version, and input_parameters.",
      "verify": [
        {
          "path": "labs/generator/assembler.py",
          "match": ["_build_asset_provenance", "engine", "endpoint", "deployment", "api_version", "trace_id", "input_parameters"]
        },
        { "path": "tests/test_generator.py", "match": ["provenance", "engine", "endpoint", "deployment", "api_version"] }
      ]
    },
    {
      "id": "cli-validation-flow-v0.3.6a",
      "section": "10 · CLI Lifecycle",
      "requirement": "CLI lifecycle must call invoke_mcp(asset, strict=...) and obey strict/relaxed semantics controlled by LABS_FAIL_FAST or CLI flags.",
      "verify": [
        { "path": "labs/cli.py", "match": ["invoke_mcp", "LABS_FAIL_FAST", "--strict", "--relaxed"] },
        { "path": "tests/test_cli.py", "match": ["mock_mcp", "strict", "relaxed", "assert"] }
      ]
    },
    {
      "id": "error-handling-retry-v0.3.6a",
      "section": "12 · Error Classes",
      "requirement": "5xx and network errors must retry ≤3 times; 4xx must fail immediately; retries logged in structured output.",
      "verify": [
        { "path": "labs/generator/external.py", "match": ["retry", "status_code", ">= 500"] },
        { "path": "tests/test_external_generator.py", "match": ["retry", "400", "503"] }
      ]
    },
    {
      "id": "structured-logging-v0.3.6a",
      "section": "13 · Logging",
      "requirement": "Structured logs must record engine, endpoint, deployment, trace_id, schema_binding, validation_status, and taxonomy to external.jsonl.",
      "verify": [
        { "path": "labs/logging.py", "match": ["external.jsonl", "json.dumps"] },
        { "path": "labs/generator/external.py", "match": ["log_external_generation", "trace_id", "schema_binding", "validation_status", "endpoint", "deployment"] }
      ]
    },
    {
      "id": "validation-passes-v0.3.6a",
      "section": "11 · Validation Rules",
      "requirement": "Strict MCP validation must pass for schema 0.7.3 with no manual correction. Relaxed mode must still persist assets with warnings.",
      "verify": [
        { "path": "labs/mcp/validate.py", "match": ["invoke_mcp", "strict", "relaxed"] },
        { "path": "tests/test_mcp_validate.py", "match": ["assert result['ok']", "strict", "relaxed"] }
      ]
    },
    {
      "id": "fallback-filling-v0.3.6a",
      "section": "8 · Normalization & Semantic Filling",
      "requirement": "Empty structural sections must auto-fill with deterministic defaults (shader, tone, haptic, control) to satisfy strict validation.",
      "verify": [
        { "path": "labs/generator/assembler.py", "match": ["_fill_empty_sections", "AssetAssembler.default_", "return asset"] },
        { "path": "tests/test_generator.py", "match": ["fill_empty_sections", "assert", "shader", "tone"] }
      ]
    }
  ],
  "report": {
    "sections": [
      "Summary of repo state",
      "Alignment (Rule → Status → Evidence)",
      "Top gaps & fixes",
      "Recommendations"
    ],
    "status_values": ["Present", "Missing", "Divergent"]
  },
  "exit_criteria": [
    "meta/output/labs_state.md non-empty",
    "AGENTS.md overwritten (non-empty)",
    "Every rule reported with Present/Missing/Divergent and ≤3 evidence lines"
  ]
}
