{
  "version": "v0.3.6a",
  "spec_ref": "docs/labs_spec.md#synesthetic-labs--spec-v0.3.6a",
  "output": {
    "paths": ["meta/output/labs_state.md", "AGENTS.md"],
    "format": "markdown",
    "must_write": true
  },
  "rules": [
    {
      "id": "env-preload-v0.3.6a",
      "section": "4 · Environment",
      "requirement": "CLI must preload .env and surface Azure environment variables: LABS_SCHEMA_VERSION, LABS_FAIL_FAST, LABS_EXTERNAL_ENGINE, AZURE_OPENAI_ENDPOINT, AZURE_OPENAI_API_KEY, AZURE_OPENAI_DEPLOYMENT, and AZURE_OPENAI_API_VERSION. Gemini vars remain placeholders only.",
      "verify": [
        {
          "path": "labs/cli.py",
          "match": [
            "dotenv",
            "load_dotenv",
            "LABS_SCHEMA_VERSION",
            "LABS_FAIL_FAST",
            "LABS_EXTERNAL_ENGINE",
            "AZURE_OPENAI_ENDPOINT",
            "AZURE_OPENAI_API_KEY",
            "AZURE_OPENAI_DEPLOYMENT",
            "AZURE_OPENAI_API_VERSION"
          ]
        },
        {
          "path": "requirements.txt",
          "match": ["python-dotenv"]
        }
      ]
    },
    {
      "id": "mcp-schema-pull-v0.3.6a",
      "section": "5 · Schema Retrieval (MCP)",
      "requirement": "Generators must call get_schema('synesthetic-asset', version=LABS_SCHEMA_VERSION) and cache schema_id + schema for reuse.",
      "verify": [
        {
          "path": "labs/generator/external.py",
          "match": [
            "from mcp.core import get_schema",
            "get_schema(",
            "\"synesthetic-asset\"",
            "schema_resp",
            "schema_id",
            "schema"
          ]
        },
        {
          "path": "tests/test_mcp_schema_pull.py",
          "match": ["get_schema", "schema", "schema_id", "assert", "ok"]
        }
      ]
    },
    {
      "id": "gemini-placeholder-v0.3.6a",
      "section": "2 · Engine Matrix",
      "requirement": "GeminiGenerator must raise NotImplementedError('Vertex AI structured-output unsupported') when invoked.",
      "verify": [
        {
          "path": "labs/generator/external.py",
          "match": ["GeminiGenerator", "NotImplementedError", "Vertex AI", "structured-output unsupported"]
        },
        {
          "path": "tests/test_external_generator.py",
          "match": ["pytest.raises", "NotImplementedError", "Vertex AI", "structured-output unsupported"]
        }
      ]
    },
    {
      "id": "azure-schema-binding-v0.3.6a",
      "section": "6 · Engine Request (Azure Schema-Bound)",
      "requirement": "AzureOpenAIGenerator must call chat.completions.create with response_format.type == 'json_schema', include the MCP schema under response_format.json_schema.schema, and enforce strict=True.",
      "verify": [
        {
          "path": "labs/generator/external.py",
          "match": [
            "AzureOpenAI",
            "response_format",
            "json_schema",
            "strict",
            "get_schema(",
            "\"synesthetic-asset\""
          ]
        },
        {
          "path": "tests/test_external_generator.py",
          "match": ["json_schema", "strict", "schema", "assert"]
        }
      ]
    },
    {
      "id": "response-parse-v0.3.6a",
      "section": "6 · Engine Request / Response Contract",
      "requirement": "Response parsing must occur only via json.loads(response.choices[0].message.content); sub-object validation allowed, no regex or fallback parsing.",
      "verify": [
        {
          "path": "labs/generator/external.py",
          "match": ["response.choices[0].message.content", "json.loads"]
        },
        {
          "path": "tests/test_external_generator.py",
          "match": ["json.loads", "message.content", "assert"]
        }
      ]
    },
    {
      "id": "validation-confirmation-v0.3.6a",
      "section": "7 · Validation (MCP)",
      "requirement": "invoke_mcp(asset, strict=True) must be called after generation; validation confirms schema compliance and does not modify asset.",
      "verify": [
        {
          "path": "labs/mcp/validate.py",
          "match": ["invoke_mcp", "strict", "return result"]
        },
        {
          "path": "tests/test_mcp_validate.py",
          "match": ["invoke_mcp", "assert result['ok']"]
        }
      ]
    },
    {
      "id": "error-handling-retry-v0.3.6a",
      "section": "Operational Error Handling",
      "requirement": "5xx and network errors must retry ≤3 times with logged attempts; 4xx must fail immediately and record error details.",
      "verify": [
        {
          "path": "labs/generator/external.py",
          "match": ["retry", "status_code", ">= 500"]
        },
        {
          "path": "tests/test_external_generator.py",
          "match": ["retry", "400", "503"]
        }
      ]
    },
    {
      "id": "structured-logging-v0.3.6a",
      "section": "8 · Logging",
      "requirement": "Structured logs must include engine, schema_id, schema_version, deployment, trace_id, and validation_status in external.jsonl entries.",
      "verify": [
        {
          "path": "labs/logging.py",
          "match": ["external.jsonl", "json.dumps"]
        },
        {
          "path": "labs/generator/external.py",
          "match": ["schema_id", "schema_version", "deployment", "trace_id", "validation_status"]
        }
      ]
    }
  ],
  "report": {
    "sections": [
      "Summary of repo state",
      "Alignment (Rule → Status → Evidence)",
      "Top gaps & fixes",
      "Recommendations"
    ],
    "status_values": ["Present", "Missing", "Divergent", "Deferred"]
  },
  "exit_criteria": [
    "meta/output/labs_state.md non-empty",
    "AGENTS.md overwritten (non-empty)",
    "Every rule reported with Present/Missing/Divergent/Deferred and ≤3 evidence lines"
  ]
}
