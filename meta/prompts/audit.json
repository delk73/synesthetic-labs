{
  "version": "v0.3.6",
  "spec_ref": "docs/specs/synesthetic_labs_v0.3.6.md#synesthetic-labs--spec-v0.3.6",
  "output": {
    "paths": ["meta/output/labs_state.md", "AGENTS.md"],
    "format": "markdown",
    "must_write": true
  },
  "rules": [
    {
      "id": "env-preload-v0.3.6",
      "section": "2 · Environment",
      "requirement": "CLI must preload .env and use LABS_SCHEMA_VERSION, GEMINI_MODEL, GEMINI_API_KEY, LABS_FAIL_FAST, and LABS_EXTERNAL_LIVE variables.",
      "verify": [
        {"path": "labs/cli.py", "match": ["dotenv", "load", "LABS_SCHEMA_VERSION", "GEMINI_MODEL", "GEMINI_API_KEY", "LABS_FAIL_FAST", "LABS_EXTERNAL_LIVE"]},
        {"path": "requirements.txt", "match": ["python-dotenv"]}
      ]
    },
    {
      "id": "mcp-schema-pull-v0.3.6",
      "section": "6 · Schema Retrieval (MCP)",
      "requirement": "Labs MUST call mcp.core.get_schema('synesthetic-asset') and use the returned schema for normalization defaults and $schema URL resolution.",
      "verify": [
        {"path": "labs/generator/external.py", "match": ["from mcp.core import get_schema", "get_schema(", "\"synesthetic-asset\"", "$schema"]},
        {"path": "tests/test_mcp_schema_pull.py", "match": ["get_schema", "list_schemas", "assert", "ok"]}
      ]
    },
    {
      "id": "gemini-schema-binding-v0.3.6",
      "section": "7 · Gemini Request / Response Contract",
      "requirement": "Gemini requests MUST embed the sanitized MCP schema document under generation_config.response_schema, with only whitelisted fields (type, properties, required, items, enum, format) and log 'schema_binding': true in external.jsonl.",
      "verify": [
        {"path": "labs/generator/external.py", "match": ["generation_config", "response_schema", "_sanitize_schema_for_gemini", "schema_binding", "external.jsonl"]},
        {"path": "tests/test_external_generator.py", "match": ["generation_config", "response_schema", "assert", "schema_binding"]}
      ]
    },
    {
      "id": "gemini-response-parse-v0.3.6",
      "section": "7 · Gemini Request / Response Contract",
      "requirement": "Response MUST be parsed from candidates[0].content.parts[0].text and json-decoded. Function-call fallback paths are deprecated.",
      "verify": [
        {"path": "labs/generator/external.py", "match": ["candidates", "content", "parts", "text", "json.loads"]},
        {"path": "tests/test_external_generator.py", "match": ["candidates", "parts", "json"]}
      ]
    },
    {
      "id": "normalization-schema-0.7.3-v0.3.6",
      "section": "8 · Normalization & Semantic Filling",
      "requirement": "When schema_version == '0.7.3', asset MUST include $schema and fully populated shader, tone, haptic, and control scaffolds using default fill helpers. Provenance must be omitted.",
      "verify": [
        {"path": "labs/generator/assembler.py", "match": ["_normalize_0_7_3", "_fill_empty_sections", "AssetAssembler.default_", "asset['$schema']", "if schema_version == '0.7.3'"]},
        {"path": "tests/test_generator.py", "match": ["0.7.3", "assert '$schema' in result", "shader", "tone", "haptic", "control"]}
      ]
    },
    {
      "id": "provenance-enriched-schema-v0.3.6",
      "section": "8.2 · Provenance (≥ 0.7.4)",
      "requirement": "For schema_version >= '0.7.4', asset MUST include a full provenance object with engine, endpoint, trace_id, and input_parameters.",
      "verify": [
        {"path": "labs/generator/assembler.py", "match": ["_build_asset_provenance", "engine", "endpoint", "trace_id", "input_parameters"]},
        {"path": "tests/test_generator.py", "match": ["0.7.4", "assert 'provenance' in result", "engine", "endpoint"]}
      ]
    },
    {
      "id": "cli-validation-flow-v0.3.6",
      "section": "9 · CLI Lifecycle",
      "requirement": "The CLI lifecycle MUST call invoke_mcp(asset, strict=...) and obey strict/relaxed mode semantics controlled by LABS_FAIL_FAST or CLI flags.",
      "verify": [
        {"path": "labs/cli.py", "match": ["invoke_mcp", "LABS_FAIL_FAST", "--strict", "--relaxed"]},
        {"path": "tests/test_cli.py", "match": ["mock_mcp", "strict", "relaxed", "assert"]}
      ]
    },
    {
      "id": "error-handling-retry-v0.3.6",
      "section": "11 · Error Classes",
      "requirement": "Network/server errors (5xx) MUST be retried ≤3 times; client errors (4xx) must fail immediately.",
      "verify": [
        {"path": "labs/generator/external.py", "match": ["retry", "status_code", ">= 500"]},
        {"path": "tests/test_external_generator.py", "match": ["retry", "no-retry", "400", "503"]}
      ]
    },
    {
      "id": "structured-logging-v0.3.6",
      "section": "12 · Logging",
      "requirement": "Structured logs MUST be written to external.jsonl with engine, endpoint, trace_id, validation_status, and schema_binding fields.",
      "verify": [
        {"path": "labs/logging.py", "match": ["external.jsonl", "json.dumps"]},
        {"path": "labs/generator/external.py", "match": ["log_external_generation", "trace_id", "schema_binding", "validation_status"]}
      ]
    },
    {
      "id": "validation-passes-v0.3.6",
      "section": "10 · Validation Rules",
      "requirement": "Strict MCP validation MUST pass for schema 0.7.3 with no manual correction. Relaxed mode MUST still persist the asset with warnings.",
      "verify": [
        {"path": "labs/mcp/validate.py", "match": ["invoke_mcp", "strict", "relaxed"]},
        {"path": "tests/test_mcp_validate.py", "match": ["assert result['ok']", "strict", "relaxed"]}
      ]
    },
    {
      "id": "fallback-filling-v0.3.6",
      "section": "8 · Normalization & Semantic Filling",
      "requirement": "Empty structural sections (shader, tone, haptic, control) MUST be auto-filled by deterministic defaults to satisfy strict validation.",
      "verify": [
        {"path": "labs/generator/assembler.py", "match": ["_fill_empty_sections", "AssetAssembler.default_", "return asset"]},
        {"path": "tests/test_generator.py", "match": ["fill_empty_sections", "assert", "shader", "tone"]}
      ]
    }
  ],
  "report": {
    "sections": [
      "Summary of repo state",
      "Alignment (Rule → Status → Evidence)",
      "Top gaps & fixes",
      "Recommendations"
    ],
    "status_values": ["Present", "Missing", "Divergent"]
  },
  "exit_criteria": [
    "meta/output/labs_state.md non-empty",
    "AGENTS.md overwritten (non-empty)",
    "Every rule reported with Present/Missing/Divergent and ≤3 evidence lines"
  ]
}
