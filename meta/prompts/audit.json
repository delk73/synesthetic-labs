{
  "id": "labs-spec-v2.0.0-audit-r2",
  "type": "codex_audit_prompt",
  "description": "Post-implementation audit of Synesthetic Labs v2.0.0 Phases 1-6 completion (v0.7.3 standup) - verify all architectural principles and exit criteria met.",
  "input": {
    "spec_version": "v2.0.0",
    "spec_ref": "docs/labs_spec.md#synesthetic-labs--specification-v2.0.0",
    "target_output": {
      "files": ["meta/output/labs_state.md"],
      "format": "markdown",
      "must_write": true
    },
    "rules_source": "docs/labs_spec.md",
    "ruleset": "version-agnostic foundation, MCP schema authority, telemetry separation, TDD, TCP-only transport, namespace isolation"
  },
  "checks": [
    {
      "id": "mcp-infrastructure-v2.0.0",
      "expect": "MCPClient stable, proven infrastructure - TCP-only transport at tcp://localhost:8765, inline resolution forced, no stdio fallback",
      "files": ["labs/mcp/client.py", "labs/mcp/tcp_client.py", "labs/mcp/exceptions.py"],
      "patterns": ["class MCPClient", "TcpMCPValidator", "tcp://localhost:8765", "resolution=\"inline\"", "MCPUnavailableError", "not", "mcp_stdio"]
    },
    {
      "id": "schema-authority-v2.0.0",
      "expect": "MCP is sole schema authority - fetch_schema() at runtime, load_schema_bundle() returns inline bundle, NO local schema storage in meta/schemas/",
      "files": ["labs/mcp/client.py", "tests/test_mcp.py"],
      "patterns": ["fetch_schema", "load_schema_bundle", "resolution='inline'", "get_schema_from_mcp", "not", "meta/schemas"]
    },
    {
      "id": "version-namespace-isolation-v2.0.0",
      "expect": "Schema versions isolated in labs/v{VERSION}/ and tests/v{VERSION}/ namespaces - no cross-version imports",
      "files": ["labs/", "tests/"],
      "patterns": ["labs/v0_7_3/", "tests/v0_7_3/", "__init__.py", "not", "from labs.v0_7_3", "not", "from labs.v0_7_4"]
    },
    {
      "id": "telemetry-separation-v2.0.0",
      "expect": "Telemetry separate from validation contract - assets sent to MCP contain ONLY schema fields, telemetry wraps validated assets",
      "files": ["labs/mcp/client.py", "tests/test_mcp.py"],
      "patterns": ["confirm", "strict=True", "validate", "not", "trace_id", "not", "engine", "not", "deployment"]
    },
    {
      "id": "tdd-validation-tests-v2.0.0",
      "expect": "Test-driven development - validation tests written FIRST, validate against live MCP (not mocks)",
      "files": ["tests/v0_7_3/test_validation.py"],
      "patterns": ["def test_", "MCPClient", "confirm", "strict=True", "assert result[\"ok\"]", "not", "@patch", "not", "mock"]
    },
    {
      "id": "tcp-transport-only-v2.0.0",
      "expect": "TCP transport only - MCP_HOST/MCP_PORT required, no stdio or socket fallback, MCPUnavailableError on connection failure",
      "files": ["labs/mcp/tcp_client.py", "docs/labs_spec.md"],
      "patterns": ["MCP_HOST", "MCP_PORT", "MCPUnavailableError", "socket.create_connection", "not", "stdio", "not", "socket"]
    },
    {
      "id": "environment-config-v2.0.0",
      "expect": "Version-specific .env.{VERSION} files - LABS_SCHEMA_VERSION, MCP_HOST, MCP_PORT, LABS_SCHEMA_RESOLUTION=inline (forced)",
      "files": [".env.0_7_3", "labs/mcp/client.py"],
      "patterns": ["LABS_SCHEMA_VERSION", "MCP_HOST", "MCP_PORT", "LABS_SCHEMA_RESOLUTION", "_normalise_resolution", "forcing inline"]
    },
    {
      "id": "makefile-verification-v2.0.0",
      "expect": "Makefile targets for MCP verification - mcp-check, mcp-list, mcp-schema, mcp-validate, test-v0.7.3",
      "files": ["Makefile"],
      "patterns": ["mcp-check", "mcp-list", "mcp-schema", "mcp-validate", "test-v0.7.3", "nc localhost 8765", "pytest tests/v0_7_3"]
    },
    {
      "id": "spec-ssot-v2.0.0",
      "expect": "labs_spec.md v2.0.0 is SSOT - version-agnostic foundation, 7-phase standup process, architectural principles, exit criteria",
      "files": ["docs/labs_spec.md"],
      "patterns": ["version: v2.0.0", "status: authoritative-ssot", "Phase 1:", "Phase 2:", "Phase 3:", "Exit Criteria", "Architectural Principles"]
    },
    {
      "id": "phase1-tests-complete-v2.0.0",
      "expect": "Phase 1 complete - tests/v0_7_3/ exists with test_validation.py (4 tests), test_generator.py (5 tests), test_telemetry.py (6 tests), test_integration.py (8 tests)",
      "files": ["tests/v0_7_3/test_validation.py", "tests/v0_7_3/test_generator.py", "tests/v0_7_3/test_telemetry.py", "tests/v0_7_3/test_integration.py"],
      "patterns": ["def test_", "pytest", "assert", "MCPClient", "23 tests total"]
    },
    {
      "id": "phase2-schema-integration-v2.0.0",
      "expect": "Phase 2 complete - MCP serves 0.7.3 schema, inline resolution working, schema bundle loaded successfully",
      "files": ["tests/v0_7_3/test_validation.py"],
      "patterns": ["test_mcp_serves_schema", "test_inline_resolution", "assert schema", "assert result['ok']"]
    },
    {
      "id": "phase3-generator-complete-v2.0.0",
      "expect": "Phase 3 complete - labs/v0_7_3/generator.py with generate_asset(), minimal generation working, Azure OpenAI structure present",
      "files": ["labs/v0_7_3/generator.py", "tests/v0_7_3/test_generator.py"],
      "patterns": ["def generate_asset", "AZURE_OPENAI_ENDPOINT", "test_minimal_generation", "test_azure_structure"]
    },
    {
      "id": "phase4-telemetry-complete-v2.0.0",
      "expect": "Phase 4 complete - labs/v0_7_3/telemetry.py with wrap_with_telemetry(), separation validated, JSONL logging working",
      "files": ["labs/v0_7_3/telemetry.py", "tests/v0_7_3/test_telemetry.py"],
      "patterns": ["def wrap_with_telemetry", "trace_id", "test_separation", "test_jsonl_logging"]
    },
    {
      "id": "phase5-ci-complete-v2.0.0",
      "expect": "Phase 5 complete - .github/workflows/ci.yml with test-v0_7_3 job, MCP infrastructure tests, version-specific test isolation",
      "files": [".github/workflows/ci.yml"],
      "patterns": ["test-v0_7_3", "pytest tests/v0_7_3", "test-mcp", "strategy", "matrix"]
    },
    {
      "id": "phase6-docs-complete-v2.0.0",
      "expect": "Phase 6 complete - labs/v0_7_3/README.md, labs/v0_7_3/cli.py, Makefile with generate/test targets",
      "files": ["labs/v0_7_3/README.md", "labs/v0_7_3/cli.py", "Makefile"],
      "patterns": ["## API Reference", "def main", "argparse", "generate:", "test-v0.7.3:"]
    },
    {
      "id": "cleanup-complete-v2.0.0",
      "expect": "v0.3.6a cleanup complete - labs/generator/, labs/agents/, labs/experimental/, labs/cli.py deleted; only MCP infrastructure remains",
      "files": ["labs/"],
      "patterns": ["not", "labs/generator", "not", "labs/agents", "not", "labs/experimental", "not", "labs/cli.py", "labs/mcp/", "labs/logging.py", "labs/core.py"]
    }
  ],
  "report": {
    "sections": [
      "Summary: Phases 1-6 completion status for v0.7.3",
      "Architecture: Compliance with v2.0.0 principles",
      "Phase 1: Test infrastructure (tests/v0_7_3/)",
      "Phase 2: Schema integration (MCP authority)",
      "Phase 3: Generator implementation (minimal + Azure structure)",
      "Phase 4: Telemetry layer (separation validated)",
      "Phase 5: CI integration (GitHub Actions)",
      "Phase 6: Documentation (README, CLI, Makefile)",
      "Test Results: Pass rate and coverage",
      "Known Limitations: Minimal asset generation (Phase 7 gap)",
      "Recommendations: Phase 7 component builders needed"
    ],
    "status_values": ["✅ Complete", "❌ Missing", "⚠️ Partial", "⏳ In Progress"]
  },
  "exit_criteria": [
    "meta/output/labs_state.md written with Phases 1-6 completion assessment",
    "Every architectural principle verified with ✅/❌/⚠️ status",
    "All 6 phases validated against spec exit criteria",
    "Test pass rate reported (22/23 expected)",
    "Phase 7 gap identified (minimal assets, no component content)",
    "Recommendations provided for Phase 7 implementation"
  ]
}
