{
  "id": "labs-spec-v0.3.7-audit-r1",
  "type": "codex_audit_prompt",
  "description": "Audit Synesthetic Labs v0.3.7 implementation against schema-bundle generation spec (0.7.3 lock, inline MCP resolution, template removal).",
  "input": {
    "spec_version": "v0.3.7",
    "spec_ref": "docs/labs_spec.md#synesthetic-labs--spec-v0.3.7-schema-bundle-generation--0-7-3-lock",
    "target_output": {
      "files": ["meta/output/labs_state.md", "AGENTS.md"],
      "format": "markdown",
      "must_write": true
    },
    "rules_source": "docs/labs_spec.md",
    "ruleset": "schema-bundle generation loop, MCP inline schema caching, assembler/component schema mapping, Azure schema-binding, strict validation confirmation, structured logging"
  },
  "checks": [
    {
      "id": "env-preload-v0.3.7",
      "expect": "dotenv preload of Azure vars LABS_SCHEMA_VERSION, LABS_SCHEMA_RESOLUTION=inline, LABS_FAIL_FAST, LABS_EXTERNAL_ENGINE, LABS_LEGACY_TEMPLATES, AZURE_OPENAI_*; CLI flag precedence respected",
      "files": ["labs/cli.py", "requirements.txt"],
      "patterns": ["load_dotenv", "LABS_SCHEMA_VERSION", "LABS_SCHEMA_RESOLUTION", "LABS_FAIL_FAST", "LABS_EXTERNAL_ENGINE", "LABS_LEGACY_TEMPLATES", "AZURE_OPENAI_ENDPOINT", "python-dotenv"]
    },
    {
      "id": "mcp-schema-bundle-fetch-v0.3.7",
      "expect": "MCPClient.fetch_schema(..., resolution='inline') retrieves SynestheticAsset 0.7.3 and writes cached bundle to meta/schemas/SynestheticAsset_0_7_3.json",
      "files": ["labs/mcp/client.py", "tests/test_mcp_schema_bundle.py"],
      "patterns": ["fetch_schema", "resolution=\"inline\"", "\"0.7.3\"", "meta/schemas/SynestheticAsset_0_7_3.json", "write_text", "json.dump"]
    },
    {
      "id": "schema-bundle-loader-v0.3.7",
      "expect": "load_schema_bundle() helper returns cached inline schema bundle as JSON dict; fetches if missing",
      "files": ["labs/mcp/client.py", "tests/test_mcp_schema_bundle.py"],
      "patterns": ["def load_schema_bundle", "Path", "exists", "fetch_schema", "json.load"]
    },
    {
      "id": "assembler-bundle-injection-v0.3.7",
      "expect": "AssetAssembler accepts schema_bundle argument and passes subschema nodes to component factories (shader, tone, haptic, control, modulation)",
      "files": ["labs/generator/assembler.py", "tests/test_assembler_bundle.py"],
      "patterns": ["class AssetAssembler", "schema_bundle", "subschema", "factory", "component"]
    },
    {
      "id": "component-schema-builders-v0.3.7",
      "expect": "Component builders derive payloads from subschema (required, enum, properties, additionalProperties) instead of static dicts",
      "files": ["labs/generator/components/", "tests/test_component_builders.py"],
      "patterns": ["required", "enum", "properties", "additionalProperties", "infer_default_for_type"]
    },
    {
      "id": "azure-schema-binding-v0.3.7",
      "expect": "AzureOpenAIGenerator uses json_schema response_format with strict=True and injected MCP inline schema 0.7.3",
      "files": ["labs/generator/external.py", "tests/test_external_generator.py"],
      "patterns": ["AzureOpenAI", "response_format", "json_schema", "\"strict\": True", "\"0.7.3\"", "load_schema_bundle"]
    },
    {
      "id": "validation-confirmation-v0.3.7",
      "expect": "MCPClient.confirm(asset, strict=True) used post-generation; no normalization, _normalize, or _fill_empty_sections calls present",
      "files": ["labs/mcp/client.py", "labs/cli.py", "tests/test_validation_strict.py"],
      "patterns": ["confirm", "strict=True", "not in", "_normalize", "_fill_empty_sections"]
    },
    {
      "id": "critic-alignment-v0.3.7",
      "expect": "CriticAgent gates any legacy field injection or review rules based on schema bundle; disabled by default",
      "files": ["labs/critic/", "tests/test_critic_alignment.py"],
      "patterns": ["CriticAgent", "schema_bundle", "legacy", "if", "LABS_LEGACY_TEMPLATES"]
    },
    {
      "id": "regression-test-v0.3.7",
      "expect": "tests/test_generator_schema.py executes GeneratorAgent.propose(prompt) then MCPClient.confirm(strict=True); fails on bundle drift",
      "files": ["tests/test_generator_schema.py"],
      "patterns": ["GeneratorAgent", "propose", "confirm", "strict=True", "assert"]
    },
    {
      "id": "structured-logging-v0.3.7",
      "expect": "Structured logs include engine, schema_id, schema_version ('0.7.3'), schema_resolution='inline', deployment, trace_id, validation_status",
      "files": ["labs/logging.py", "labs/generator/external.py"],
      "patterns": ["external.jsonl", "json.dumps", "schema_id", "\"0.7.3\"", "schema_resolution", "\"inline\"", "trace_id", "validation_status"]
    }
  ],
  "report": {
    "sections": ["Summary of repo state", "Alignment (Rule → Status → Evidence)", "Top gaps & fixes", "Recommendations"],
    "status_values": ["Present", "Missing", "Divergent", "Deferred"]
  },
  "exit_criteria": [
    "meta/output/labs_state.md non-empty",
    "AGENTS.md overwritten (non-empty)",
    "Every rule has a Present/Missing/Divergent/Deferred status with ≤3 evidence lines"
  ]
}
