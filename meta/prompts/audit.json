{
  "task": "Audit synesthetic-labs repo state (v0.3 External Generators with MCP dependency)",
  "objective": "Compare implementation, tests, and docs against docs/labs_spec.md v0.3. Report what is Present, Missing, or Divergent, and export an updated AGENTS.md snapshot.",
  "constraints": {
    "style": "deterministic, terse, Markdown headings with bullets/tables",
    "rules": [
      "Ground all findings in visible code/tests/docs",
      "Mark functionality not present as Missing",
      "Mark intentional design differences as Divergent",
      "No speculation about unseen behavior",
      "Recommendations must cite evidence (file path + line/section) and be actionable code/test/doc changes only",
      "Always write the full audit report directly to meta/output/labs_state.md (overwrite if exists, non-empty)",
      "Always write the updated agent snapshot directly to AGENTS.md (overwrite if exists, non-empty)",
      "Labs MUST call MCP for schema validation via STDIO, socket, or TCP; any local fallback is a non-compliant divergence",
      "Labs MUST log generator, critic, patch, MCP, and external generator interactions; silent failures are non-compliant",
      "Audit is incomplete unless both output files are created or overwritten with non-empty content"
    ],
    "sections": [
      "Summary of repo state",
      "Top gaps & fixes (3-5 bullets)",
      "Alignment with labs_spec.md (table: Spec item → Status → Evidence)",
      "Generator implementation (table: Component → Status → Evidence)",
      "Critic implementation (table: Responsibility → Status → Evidence)",
      "Assembler / Wiring step (bullets: parameter index, dangling reference pruning, provenance)",
      "Patch lifecycle (bullets: preview, apply, rate stubs, logging)",
      "MCP integration (bullets: STDIO, socket, TCP validation; failure handling; strict vs relaxed mode)",
      "External generator integration (bullets: Gemini/OpenAI interface, provenance logging, CLI flags, error handling)",
      "Test coverage (table: Feature → Tested? → Evidence)",
      "Dependencies and runtime (table: Package → Used in → Required/Optional)",
      "Environment variables (bullets: name, default, behavior when external API unavailable)",
      "Logging (bullets: structured JSONL, provenance fields, patch/rating/external fields, location under meta/output/)",
      "Documentation accuracy (bullets: README vs. labs_spec.md)",
      "Detected divergences",
      "Recommendations"
    ]
  },
  "scope": {
    "files": [
      "README.md",
      "docs/labs_spec.md",
      "requirements.txt",
      "labs/*.py",
      "tests/*.py",
      "meta/",
      "AGENTS.md",
      ".github/workflows/",
      ".env.example"
    ]
  },
  "output": {
    "paths": [
      "meta/output/labs_state.md",
      "AGENTS.md"
    ],
    "format": "Markdown",
    "must_write": true,
    "stdout_optional": true
  },
  "exit_criteria": [
    "meta/output/labs_state.md is written and non-empty",
    "AGENTS.md snapshot updated with current audit findings",
    "Spec v0.3 External Generators features mapped to Present / Missing / Divergent in table form",
    "Generator, Critic, Assembler, Patch lifecycle, and External generator integration explicitly verified",
    "MCP validation integration checked for STDIO, socket, and TCP; strict vs relaxed mode",
    "External generator provenance and error handling verified",
    "Test coverage summarized in a table with evidence",
    "Dependencies mapped to imports in a table with evidence",
    "Environment variables listed with defaults and behavior when MCP or external API unreachable",
    "Logging practices verified (structured JSONL, provenance, patch/rating/external, meta/output/)",
    "README cross-checked against docs/labs_spec.md"
  ]
}
