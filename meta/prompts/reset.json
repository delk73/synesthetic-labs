{
  "meta": {
    "version": "1.0.0",
    "created": "2025-10-27",
    "purpose": "Reset synesthetic-labs repo to minimal foundation while preserving essential infrastructure",
    "context": "After archiving v0.3.6a (see meta/archive/), reset to minimal working state ready for v2 rebuild"
  },
  "preserve": {
    "rationale": "Keep only proven working components and infrastructure",
    "directories": {
      "meta/": {
        "keep": "entire directory",
        "contains": [
          "meta/archive/ (v0.3.6a zip)",
          "meta/prompts/ (standup, reset scripts)",
          "meta/schemas/ (reference only - MCP is authority)",
          "meta/output/ (logs, telemetry)"
        ],
        "rationale": "Documentation, archives, prompts for rebuilding"
      },
      "docs/": {
        "keep": "entire directory",
        "action": "preserve and update for v2",
        "rationale": "Documentation infrastructure - will be rewritten for v2 but structure preserved"
      },
      "labs/mcp/": {
        "keep": "entire directory",
        "files": [
          "labs/mcp/__init__.py",
          "labs/mcp/client.py",
          "labs/mcp/validate.py",
          "labs/mcp/exceptions.py",
          "labs/mcp/__main__.py",
          "labs/mcp/socket_main.py",
          "labs/mcp/tcp_client.py"
        ],
        "rationale": "MCP client works correctly - proven foundation for v2"
      },
      "mcp/": {
        "keep": "entire directory",
        "files": [
          "mcp/__init__.py",
          "mcp/core.py"
        ],
        "rationale": "MCP server/protocol core"
      },
      "docker/": {
        "keep": "all docker infrastructure",
        "files": [
          "Dockerfile",
          "docker-compose.yml"
        ],
        "rationale": "Container infrastructure for deployment"
      },
      "tests/": {
        "keep": "MCP connectivity tests only",
        "files_to_keep": [
          "tests/conftest.py",
          "tests/test_mcp.py",
          "tests/test_mcp_validator.py",
          "tests/test_mcp_schema_pull.py",
          "tests/test_socket.py",
          "tests/test_tcp.py"
        ],
        "files_to_remove": [
          "tests/test_generator*.py (all generator tests - will rebuild)",
          "tests/test_critic.py",
          "tests/test_pipeline.py",
          "tests/test_patches.py",
          "tests/test_prompt_experiment.py",
          "tests/test_external_generator.py",
          "tests/test_ratings.py",
          "tests/test_determinism.py",
          "tests/test_cli_logging.py",
          "tests/test_logging.py",
          "tests/test_path_guard.py"
        ],
        "rationale": "Keep only MCP connectivity/validation tests that prove infrastructure works"
      },
      "root/": {
        "keep": [
          ".gitignore",
          ".github/ (CI/CD workflows)",
          ".vscode/ (editor settings)",
          "requirements.txt (will be trimmed)",
          "README.md (KEEP - will be updated for v2)",
          "LESSONS_LEARNED.md",
          "Dockerfile",
          "docker-compose.yml",
          ".env.example (template only)"
        ],
        "remove": [
          "audit.sh",
          "clear.sh",
          "e2e.sh",
          "nuke.sh",
          "test.sh",
          "notes.md",
          "AGENTS.md (archived in v0.3.6a)",
          ".env (if exists - secrets should never be committed)"
        ],
        "rationale": "Keep infrastructure, remove v0.3.6a scripts"
      }
    }
  },
  "remove": {
    "rationale": "Delete all complex/broken code from v0.3.6a",
    "directories": {
      "labs/agents/": {
        "action": "delete entire directory",
        "contains": ["critic.py", "generator.py"],
        "rationale": "Premature feature - added before core worked"
      },
      "labs/experimental/": {
        "action": "delete entire directory",
        "contains": ["modulation.py", "rule_bundle.py"],
        "rationale": "Experimental code added before basics worked"
      },
      "labs/experiments/": {
        "action": "delete entire directory",
        "contains": ["prompt_experiment.py"],
        "rationale": "Experiments from v0.3.6a"
      },
      "labs/lifecycle/": {
        "action": "delete entire directory",
        "rationale": "Patch lifecycle - normalization we shouldn't need"
      },
      "labs/datasets/": {
        "action": "delete entire directory",
        "rationale": "Not used in minimal implementation"
      },
      "labs/generator/": {
        "action": "delete entire directory",
        "contains": [
          "assembler.py",
          "shader.py",
          "tone.py",
          "control.py",
          "haptic.py",
          "meta.py",
          "external.py",
          "minimal.py (prototype)"
        ],
        "rationale": "Hardcoded template generators - will rebuild schema-driven"
      },
      "labs/files": {
        "remove": [
          "labs/cli.py (v0.3.6a-specific)",
          "labs/patches.py",
          "labs/mcp_stub.py",
          "labs/.env (if exists - secrets)"
        ],
        "keep": [
          "labs/transport.py (REQUIRED by mcp/)",
          "labs/mcp_stdio.py (REQUIRED by mcp/client.py)",
          "labs/logging.py",
          "labs/core.py",
          "labs/__init__.py (will be updated)",
          "labs/.env.example (template only)"
        ],
        "rationale": "Cruft from v0.3.6a"
      }
    }
  },
  "minimal_structure": {
    "description": "After reset, repo should have this clean structure",
    "tree": {
      "root": [
        ".git/",
        ".gitignore",
        ".github/workflows/ci.yml",
        ".vscode/settings.json",
        "Dockerfile",
        "docker-compose.yml",
        "README.md (rewritten for v2)",
        "LESSONS_LEARNED.md",
        "requirements.txt (minimal)"
      ],
      "labs/": [
        "__init__.py",
        "mcp/ (entire directory preserved)"
      ],
      "mcp/": [
        "__init__.py",
        "core.py"
      ],
      "meta/": [
        "archived/archive-v0.3.6a.zip",
        "prompts/v2standup.json",
        "prompts/reset.json (this file)",
        "schemas/ (reference only)",
        "output/ (logs)"
      ],
      "docs/": [
        "README.md (v2 architecture)",
        "reset_process.md",
        "(other v2 docs as needed)"
      ],
      "tests/": [
        "conftest.py",
        "test_mcp.py",
        "test_mcp_validator.py",
        "test_mcp_schema_pull.py",
        "test_socket.py",
        "test_tcp.py"
      ]
    }
  },
  "reset_procedure": {
    "description": "Step-by-step process to reset repo to minimal state",
    "steps": [
      {
        "step": 1,
        "action": "verify_archive",
        "commands": [
          "ls -lh meta/archived/archive-v0.3.6a.zip",
          "# Verify archive exists and is ~15MB"
        ],
        "rationale": "Ensure v0.3.6a is safely archived before deleting"
      },
      {
        "step": 2,
        "action": "remove_cruft_directories",
        "commands": [
          "rm -rf labs/agents/",
          "rm -rf labs/experimental/",
          "rm -rf labs/experiments/",
          "rm -rf labs/lifecycle/",
          "rm -rf labs/datasets/",
          "rm -rf labs/generator/",
          "rm -rf docs/"
        ],
        "verify": "ls labs/ should show: __init__.py, mcp/, and maybe a few root .py files"
      },
      {
        "step": 3,
        "action": "remove_cruft_files",
        "commands": [
          "rm -f labs/cli.py",
          "rm -f labs/patches.py",
          "rm -f labs/mcp_stub.py",
          "rm -f .env labs/.env",
          "rm -f audit.sh clear.sh e2e.sh nuke.sh test.sh",
          "rm -f notes.md AGENTS.md"
        ],
        "verify": "git status should show many deletions",
        "note": "Keep labs/transport.py and labs/mcp_stdio.py - required by MCP client"
      },
      {
        "step": "3b",
        "action": "update_labs_init",
        "commands": [
          "cat > labs/__init__.py << 'EOF'",
          "\"\"\"Synesthetic Labs v2 - Minimal schema-driven generator.\"\"\"",
          "",
          "__version__ = \"2.0.0\"",
          "",
          "__all__ = []",
          "EOF"
        ],
        "verify": "labs/__init__.py contains v2 minimal version, no agent imports"
      },
      {
        "step": 4,
        "action": "clean_tests_directory",
        "commands": [
          "cd tests/",
          "# Keep only MCP tests",
          "rm -f test_generator*.py test_critic.py test_pipeline.py test_patches.py",
          "rm -f test_prompt_experiment.py test_external_generator.py test_ratings.py",
          "rm -f test_determinism.py test_cli_logging.py test_logging.py test_path_guard.py",
          "cd .."
        ],
        "verify": "ls tests/ should show: conftest.py, test_mcp*.py, test_socket.py, test_tcp.py"
      },
      {
        "step": 5,
        "action": "verify_mcp_preserved",
        "commands": [
          "ls labs/mcp/",
          "# Should see: client.py, validate.py, exceptions.py, etc.",
          "ls mcp/",
          "# Should see: core.py"
        ],
        "rationale": "Confirm MCP infrastructure intact"
      },
      {
        "step": 6,
        "action": "verify_meta_preserved",
        "commands": [
          "ls meta/archived/",
          "ls meta/prompts/",
          "# Should see archive zip and standup/reset prompts"
        ],
        "rationale": "Confirm documentation preserved"
      },
      {
        "step": 7,
        "action": "trim_requirements",
        "description": "Reduce requirements.txt to minimal dependencies",
        "minimal_requirements": [
          "# MCP Client",
          "httpx>=0.27.0",
          "jsonschema>=4.23.0",
          "pydantic>=2.8.0",
          "",
          "# Environment",
          "python-dotenv>=1.0.1",
          "",
          "# Testing",
          "pytest>=8.3.0",
          "pytest-asyncio>=0.24.0"
        ],
        "rationale": "Remove Azure, Gemini, and other external dependencies until needed in v2"
      },
      {
        "step": 8,
        "action": "rewrite_readme",
        "description": "Update README.md for v2 (keep existing, update content)",
        "sections": [
          "# Synesthetic Labs v2",
          "",
          "Minimal schema-driven synesthetic asset generator with MCP validation.",
          "",
          "## Status",
          "🏗️ **Under reconstruction** - v0.3.6a archived, building minimal v2",
          "",
          "## Architecture",
          "- **MCP Client**: Proven working infrastructure (preserved from v0.3.6a)",
          "- **Schema Authority**: MCP is single source of truth",
          "- **Generation**: Schema-driven (not template-based)",
          "",
          "## Setup",
          "See `meta/prompts/v2standup.json` for rebuild process.",
          "",
          "## Archive",
          "v0.3.6a archived in `meta/archive/archive-v0.3.6a.zip`",
          "See `LESSONS_LEARNED.md` for context."
        ]
      },
      {
        "step": 9,
        "action": "verify_tests_pass",
        "commands": [
          "pytest tests/test_mcp.py -v",
          "pytest tests/test_mcp_validator.py -v",
          "pytest tests/test_mcp_schema_pull.py -v"
        ],
        "expected": "MCP connectivity tests should still pass",
        "rationale": "Prove infrastructure works after cleanup"
      },
      {
        "step": 10,
        "action": "commit_reset",
        "commands": [
          "git add -A",
          "git commit -m 'Reset to minimal foundation - MCP infrastructure only'",
          "git push"
        ],
        "rationale": "Lock in clean minimal state before v2 rebuild"
      }
    ]
  },
  "post_reset_state": {
    "description": "After reset, you should have:",
    "infrastructure": {
      "mcp_client": "✅ Working - labs/mcp/ fully functional",
      "mcp_tests": "✅ Passing - prove connectivity works",
      "docker": "✅ Preserved - deployment infrastructure intact",
      "archive": "✅ Safe - v0.3.6a in meta/archive/",
      "documentation": "✅ Complete - LESSONS_LEARNED.md + v2standup.json"
    },
    "removed": {
      "generators": "❌ Deleted - hardcoded templates removed",
      "agents": "❌ Deleted - critic/generator agents removed",
      "experimental": "❌ Deleted - experimental modules removed",
      "lifecycle": "❌ Deleted - patch/normalization removed",
      "complex_tests": "❌ Deleted - generator tests removed",
      "cruft": "❌ Deleted - docs, scripts, stubs removed"
    },
    "ready_for": "v2 rebuild following meta/prompts/v2standup.json"
  },
  "validation": {
    "checklist": [
      {
        "check": "Archive exists",
        "command": "ls -lh meta/archived/archive-v0.3.6a.zip",
        "expected": "~15MB file exists"
      },
      {
        "check": "MCP client intact",
        "command": "ls labs/mcp/client.py",
        "expected": "File exists"
      },
      {
        "check": "MCP tests pass",
        "command": "pytest tests/test_mcp.py -v",
        "expected": "All tests pass"
      },
      {
        "check": "Generator code removed",
        "command": "ls labs/generator/",
        "expected": "Directory does not exist"
      },
      {
        "check": "No secrets in repo",
        "command": "git ls-files | grep -E '^\\.env$|^labs/\\.env$'",
        "expected": "No matches (only .env.example files should exist)"
      },
      {
        "check": "Transport files kept",
        "command": "ls labs/transport.py labs/mcp_stdio.py",
        "expected": "Both files exist"
      },
      {
        "check": "Clean git status",
        "command": "git status",
        "expected": "On branch main, working tree clean (after commit)"
      },
      {
        "check": "Prompts preserved",
        "command": "ls meta/prompts/",
        "expected": "v2standup.json, reset.json exist"
      }
    ]
  },
  "next_steps": {
    "after_reset": [
      "1. Verify all validation checks pass",
      "2. Read meta/prompts/v2standup.json",
      "3. Execute v2standup steps 1-6 to build minimal generator",
      "4. Prove test_validation.py passes with MCP strict validation",
      "5. Only then extend with features (step 7)"
    ]
  }
}
